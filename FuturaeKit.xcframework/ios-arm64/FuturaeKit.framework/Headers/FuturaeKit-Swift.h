#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef FUTURAEKIT_SWIFT_H
#define FUTURAEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <FuturaeKit/FuturaeKit.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FuturaeKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
SWIFT_CLASS("_TtC10FuturaeKit17ActivationURLData")
@interface ActivationURLData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull activationCode;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
- (nonnull instancetype)initWithActivationCode:(NSString * _Nonnull)activationCode userId:(NSString * _Nullable)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10FuturaeKit8ApiError")
@interface ApiError : NSObject
@end

@class FTRExtraInfo;
enum AuthReplyType : NSInteger;
@class ApproveAuthQRCode;
@class ApproveAuthUsernameless;
@class ApproveAuthPush;
@class ApproveAuthMultiNumber;
@class RejectAuthQRCode;
@class RejectAuthUsernameless;
@class RejectAuthPush;
/// Encapsulates parameters required for an authentication reply.
SWIFT_CLASS("_TtC10FuturaeKit19AuthReplyParameters")
@interface AuthReplyParameters : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull qrCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly) NSInteger multiNumberChoice;
@property (nonatomic, readonly, copy) NSArray<FTRExtraInfo *> * _Nullable extraInfo;
@property (nonatomic, readonly) enum AuthReplyType reply;
/// Creates an <code>AuthReplyParameters</code> instance for a push authentication reply.
/// \param reply The type of reply (<code>approve</code>, <code>reject</code>, or <code>fraud</code>).
///
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An <code>AuthReplyParameters</code> instance corresponding to the specified reply type.
+ (AuthReplyParameters * _Nonnull)replyPush:(enum AuthReplyType)reply sessionId:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an <code>AuthReplyParameters</code> instance for a QR code authentication reply.
/// \param reply The type of reply (<code>approve</code>, <code>reject</code>, or <code>fraud</code>).
///
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An <code>AuthReplyParameters</code> instance corresponding to the specified reply type.
+ (AuthReplyParameters * _Nonnull)replyQRCode:(enum AuthReplyType)reply qrCode:(NSString * _Nonnull)qrCode extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an <code>AuthReplyParameters</code> instance for a usernameless QR code authentication reply.
/// \param reply The type of reply (<code>approve</code>, <code>reject</code>, or <code>fraud</code>).
///
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An <code>AuthReplyParameters</code> instance corresponding to the specified reply type.
+ (AuthReplyParameters * _Nonnull)replyUsernamelessQRCode:(enum AuthReplyType)reply qrCode:(NSString * _Nonnull)qrCode userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an <code>AuthReplyParameters</code> instance for a multi-number choice authentication reply.
/// \param reply The type of reply (<code>approve</code>, <code>reject</code>, or <code>fraud</code>).
///
/// \param multiNumberChoice The selected value for multi-number authentication.
///
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An <code>AuthReplyParameters</code> instance corresponding to the specified reply type.
+ (AuthReplyParameters * _Nonnull)replyMultiNumber:(enum AuthReplyType)reply multiNumberChoice:(NSInteger)multiNumberChoice sessionId:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for approving an authentication request with a QR code.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>ApproveAuthQRCode</code> with the provided parameters.
+ (ApproveAuthQRCode * _Nonnull)approveQRCode:(NSString * _Nonnull)qrCode extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for approving a usernameless authentication request with a QR code.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>ApproveAuthUsernameless</code> with the provided parameters.
+ (ApproveAuthUsernameless * _Nonnull)approveUsernamelessQRCode:(NSString * _Nonnull)qrCode userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for approving a push notification based authentication request.
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>ApproveAuthPush</code> with the provided parameters.
+ (ApproveAuthPush * _Nonnull)approvePush:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for approving a multi-number choice based authentication request.
/// \param multiNumberChoice The selected value for multi-number authentication.
///
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>ApproveAuthMultiNumber</code> with the provided parameters.
+ (ApproveAuthMultiNumber * _Nonnull)approvePushMultiNumber:(NSInteger)multiNumberChoice sessionId:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for rejecting an authentication request with a QR code.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>RejectAuthQRCode</code> with the provided parameters.
+ (RejectAuthQRCode * _Nonnull)rejectQRCode:(NSString * _Nonnull)qrCode isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for rejecting a usernameless authentication request with a QR code.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param userId The user identifier.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>RejectAuthUsernameless</code> with the provided parameters.
+ (RejectAuthUsernameless * _Nonnull)rejectUsernamelessQRCode:(NSString * _Nonnull)qrCode userId:(NSString * _Nonnull)userId isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance for rejecting a push notification based authentication request.
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
///
/// returns:
/// An instance of <code>RejectAuthPush</code> with the provided parameters.
+ (RejectAuthPush * _Nonnull)rejectPush:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents parameters for approving a multi-number choice based authentication request.
SWIFT_CLASS("_TtC10FuturaeKit22ApproveAuthMultiNumber")
@interface ApproveAuthMultiNumber : AuthReplyParameters
/// Initializes a new instance of <code>ApproveAuthMultiNumber</code>.
/// \param multiNumberChoice The selected value for multi-number authentication.
///
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSInteger)multiNumberChoice sessionId:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for approving a push notification based authentication request.
SWIFT_CLASS("_TtC10FuturaeKit15ApproveAuthPush")
@interface ApproveAuthPush : AuthReplyParameters
/// Initializes a new instance of <code>ApproveAuthPush</code>.
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for approving an authentication via QR code.
SWIFT_CLASS("_TtC10FuturaeKit17ApproveAuthQRCode")
@interface ApproveAuthQRCode : AuthReplyParameters
/// Initializes a new instance of <code>ApproveAuthQRCode</code>.
/// \param qrCode QR code string for authentication.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>.
///
- (nonnull instancetype)init:(NSString * _Nonnull)qrCode extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for approving a usernameless authentication request.
SWIFT_CLASS("_TtC10FuturaeKit23ApproveAuthUsernameless")
@interface ApproveAuthUsernameless : AuthReplyParameters
/// Initializes a new instance of <code>ApproveAuthUsernameless</code>.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param userId The user identifier.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSString * _Nonnull)qrCode userId:(NSString * _Nonnull)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents types of authentication replies.
typedef SWIFT_ENUM(NSInteger, AuthReplyType, open) {
  AuthReplyTypeApprove = 0,
  AuthReplyTypeReject = 1,
  AuthReplyTypeFraud = 2,
};

SWIFT_CLASS("_TtC10FuturaeKit21AuthenticationURLData")
@interface AuthenticationURLData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionToken;
@property (nonatomic, readonly, copy) NSString * _Nullable mobileAuthRedirectUri;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId sessionToken:(NSString * _Nonnull)sessionToken mobileAuthRedirectUri:(NSString * _Nullable)mobileAuthRedirectUri OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EnrollActivationCode;
@class EnrollShortCode;
@class EnrollActivationCodeSDKPin;
@class EnrollShortCodeSDKPin;
/// <code>EnrollParameters</code> class encapsulates the parameters required for enrolling a user.
SWIFT_CLASS("_TtC10FuturaeKit16EnrollParameters")
@interface EnrollParameters : NSObject
/// The enrollment code as a string.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// Optional SDK pin used during enrollment.
@property (nonatomic, copy) NSString * _Nonnull sdkPin;
/// Optional flow binding token  used during enrollment.
@property (nonatomic, copy) NSString * _Nullable bindingToken;
/// Creates <code>EnrollActivationCode</code> with an activation code.
/// \param activationCode The activation code for enrollment.
///
///
/// returns:
/// An instance of <code>EnrollActivationCode</code>.
+ (EnrollActivationCode * _Nonnull)withActivationCode:(NSString * _Nonnull)activationCode SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollActivationCode</code> with an activation code.
/// \param activationCode The activation code for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>EnrollActivationCode</code>.
+ (EnrollActivationCode * _Nonnull)withActivationCode:(NSString * _Nonnull)activationCode bindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollShortCode</code> with a short code.
/// \param shortCode The short code for enrollment.
///
///
/// returns:
/// An instance of <code>EnrollShortCode</code>.
+ (EnrollShortCode * _Nonnull)withShortCode:(NSString * _Nonnull)shortCode SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollShortCode</code> with a short code.
/// \param shortCode The short code for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>EnrollShortCode</code>.
+ (EnrollShortCode * _Nonnull)withShortCode:(NSString * _Nonnull)shortCode bindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollActivationCodeSDKPin</code> with an activation code and SDK pin.
/// \param activationCode The activation code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
///
/// returns:
/// An instance of <code>EnrollActivationCodeSDKPin</code>.
+ (EnrollActivationCodeSDKPin * _Nonnull)withActivationCode:(NSString * _Nonnull)activationCode sdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollActivationCodeSDKPin</code> with an activation code and SDK pin.
/// \param activationCode The activation code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>EnrollActivationCodeSDKPin</code>.
+ (EnrollActivationCodeSDKPin * _Nonnull)withActivationCode:(NSString * _Nonnull)activationCode sdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollShortCodeSDKPin</code> with a short code and SDK pin.
/// \param shortCode The short code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>EnrollShortCodeSDKPin</code>.
+ (EnrollShortCodeSDKPin * _Nonnull)withShortCode:(NSString * _Nonnull)shortCode sdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
/// Creates <code>EnrollShortCodeSDKPin</code> with a short code and SDK pin.
/// \param shortCode The short code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
///
/// returns:
/// An instance of <code>EnrollShortCodeSDKPin</code>.
+ (EnrollShortCodeSDKPin * _Nonnull)withShortCode:(NSString * _Nonnull)shortCode sdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents enrollment parameters using an activation code.
SWIFT_CLASS("_TtC10FuturaeKit20EnrollActivationCode")
@interface EnrollActivationCode : EnrollParameters
/// Initializes a new instance with the provided activation code.
/// \param code The activation code for enrollment.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new instance with the provided activation code and binding token..
/// \param code The activation code for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code bindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents enrollment parameters using an activation code and an SDK pin.
SWIFT_CLASS("_TtC10FuturaeKit26EnrollActivationCodeSDKPin")
@interface EnrollActivationCodeSDKPin : EnrollParameters
/// Initializes a new instance with the provided activation code and SDK pin.
/// \param code The activation code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code sdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new instance with the provided activation code, SDK pin and binding token.
/// \param code The activation code for enrollment.
///
/// \param sdkPin An SDK pin used for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code sdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents enrollment parameters using a short code.
SWIFT_CLASS("_TtC10FuturaeKit15EnrollShortCode")
@interface EnrollShortCode : EnrollParameters
/// Initializes a new instance with the provided short code.
/// \param code The short code for enrollment.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new instance with the provided short code and binding token.
/// \param code The activation code for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code bindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents enrollment parameters using a short code and an SDK pin.
SWIFT_CLASS("_TtC10FuturaeKit21EnrollShortCodeSDKPin")
@interface EnrollShortCodeSDKPin : EnrollParameters
/// Initializes a new instance with the provided short code and SDK pin.
/// \param code The short code for enrollment.
///
/// \param sdkPin An SDK pin for enrollment.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code sdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new instance with the provided short code, SDK pin and binding token..
/// \param code The short code for enrollment.
///
/// \param sdkPin An SDK pin for enrollment.
///
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code sdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@class FTRSession;
/// <code>FTRAccount</code> class represents an account within the SDK, encapsulating various details about the user and their enrollment status.
SWIFT_CLASS("_TtC10FuturaeKit10FTRAccount")
@interface FTRAccount : NSObject
/// A unique identifier for the user associated with this account.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// The username of the user, if available.
@property (nonatomic, copy) NSString * _Nullable username;
/// The base URL of the API server associated with this account, if applicable.
@property (nonatomic, copy) NSString * _Nullable ftApiServerBaseUrl;
/// A Boolean value indicating whether the user is enrolled or not.
@property (nonatomic) BOOL enrolled;
/// The service identifier associated with this account, if available.
@property (nonatomic, copy) NSString * _Nullable serviceId;
/// The device identifier for the user’s device, if applicable.
@property (nonatomic, copy) NSString * _Nullable deviceId;
/// The name of the service associated with this account, if available.
@property (nonatomic, copy) NSString * _Nullable serviceName;
/// The date and time when the account information was last updated.
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
/// The URL string of the service logo, if available.
@property (nonatomic, copy) NSString * _Nullable serviceLogo;
/// An array of strings representing the allowed factors for authentication for this account.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable allowedFactors;
/// A Boolean value indicating whether the account is locked out from the service.
@property (nonatomic) BOOL lockedOut;
/// An array of <code>FTRSession</code> objects representing sessions associated with this account, if available.
@property (nonatomic, copy) NSArray<FTRSession *> * _Nullable sessions;
/// The date and time when the account was enrolled.
@property (nonatomic, copy) NSDate * _Nullable enrolledAt;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId username:(NSString * _Nullable)username ftApiServerBaseUrl:(NSString * _Nullable)ftApiServerBaseUrl enrolled:(BOOL)enrolled serviceId:(NSString * _Nullable)serviceId deviceId:(NSString * _Nullable)deviceId serviceName:(NSString * _Nullable)serviceName updatedAt:(NSDate * _Nullable)updatedAt serviceLogo:(NSString * _Nullable)serviceLogo allowedFactors:(NSArray<NSString *> * _Nullable)allowedFactors lockedOut:(BOOL)lockedOut sessions:(NSArray<FTRSession *> * _Nullable)sessions enrolledAt:(NSDate * _Nullable)enrolledAt OBJC_DESIGNATED_INITIALIZER;
+ (FTRAccount * _Nullable)fromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FTRActivityDetails;
/// <code>FTRAccountActivity</code> class provides detailed information about a specific activity in an account’s history.
SWIFT_CLASS("_TtC10FuturaeKit18FTRAccountActivity")
@interface FTRAccountActivity : NSObject
/// Detailed information about the activity, encapsulated in an <code>FTRActivityDetails</code> object.
@property (nonatomic, readonly, strong) FTRActivityDetails * _Nonnull details;
/// The identifier of the device associated with this activity, if applicable.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// The country code associated with the device used for the login, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable loginDevCountry;
/// The timestamp representing when the activity occurred.
@property (nonatomic, readonly) NSInteger timestamp;
/// The user identifier associated with this activity, if applicable.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@end

/// <code>FTRAccountHistory</code> class represents the activity history associated with an account.
SWIFT_CLASS("_TtC10FuturaeKit17FTRAccountHistory")
@interface FTRAccountHistory : NSObject
/// An array of <code>FTRAccountActivity</code> objects, each detailing an individual activity in the account’s history.
@property (nonatomic, readonly, copy) NSArray<FTRAccountActivity *> * _Nonnull activity;
/// The total count of activities in the account’s history.
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
@end

@class FTRFeatureFlag;
@class FTRApiMessage;
/// <code>FTRAccountsStatus</code> class encapsulates the status of multiple accounts along with associated feature flags.
SWIFT_CLASS("_TtC10FuturaeKit17FTRAccountsStatus")
@interface FTRAccountsStatus : NSObject
/// An array of <code>FTRAccount</code> objects, each representing an account with its detailed information.
@property (nonatomic, readonly, copy) NSArray<FTRAccount *> * _Nonnull accounts;
/// An array of <code>FTRFeatureFlag</code> objects, each indicating the status and details of a specific feature flag.
@property (nonatomic, readonly, copy) NSArray<FTRFeatureFlag *> * _Nonnull featureFlags;
/// An array of <code>FTRAPIMessage</code> objects, each indicating an error message from the API response.
@property (nonatomic, readonly, copy) NSArray<FTRApiMessage *> * _Nonnull messages;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>FTRActivityDetails</code> class encapsulates the fine-grained details of an individual activity within an account’s history.
SWIFT_CLASS("_TtC10FuturaeKit18FTRActivityDetails")
@interface FTRActivityDetails : NSObject
/// The factor associated with the activity.
@property (nonatomic, readonly, copy) NSString * _Nonnull factor;
/// The type of activity, if specified.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// The result of the activity,  if available.
@property (nonatomic, readonly, copy) NSString * _Nullable result;
/// The type of device used in the activity, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceType;
/// The backend IP address associated with the activity, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable backendIp;
/// The trusted device IP address involved in the activity, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable trustedDeviceIp;
@end

enum FTRMessageLevel : NSInteger;
/// <code>FTRApiMessage</code> class represents an API response error message
SWIFT_CLASS("_TtC10FuturaeKit13FTRApiMessage")
@interface FTRApiMessage : NSObject
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly) enum FTRMessageLevel level;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SDKStatus : NSInteger;
SWIFT_CLASS("_TtC10FuturaeKit9FTRClient")
@interface FTRClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FTRClient * _Nonnull shared;)
+ (FTRClient * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Query the SDK to find out the current SDK  status.
///
/// returns:
/// <code>SDKStatus</code>type, can be <code>launched</code>, <code>launching</code>, <code>notLaunched</code>, <code>needsReset</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum SDKStatus sdkStatus;)
+ (enum SDKStatus)sdkStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieves a synchronous authentication token for a specified user.
/// \param userId The user identifier for whom the authentication token is retrieved.
///
///
/// throws:
/// An error if there is an issue in retrieving the token.
///
/// returns:
/// A string representing the synchronous authentication token.
- (NSString * _Nullable)getSynchronousAuthTokenWithUserId:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURL;
@protocol FTROpenURLDelegate;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Handle URI scheme calls, which can be used either to enroll or authenticate.
/// \param url valid url string to be handled by the SDK.
///
/// \param options options to open the URL
///
/// \param delegate delegate to be notified about the operation result.
///
- (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options delegate:(id <FTROpenURLDelegate> _Nullable)delegate;
@end

@class SDKReport;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Get report about the state of the SDK
///
/// returns:
/// <code>SDKReport</code> which contains a report in string format and an error count
- (SDKReport * _Nullable)sdkStateReportAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class FTRConfig;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Launches the SDK with the provided configuration.
/// This method initializes the SDK with the given <code>FTRConfig</code> instance, setting up necessary parameters and configurations. It should be called before using any SDK functionality. The method can throw an error if the configuration is invalid or if there’s an issue during the initialization process.
/// \param config An <code>FTRConfig</code> object containing the configuration settings for the SDK.
///
///
/// throws:
/// An error if the SDK fails to launch due to invalid configuration or other initialization issues.
+ (BOOL)launchWithConfig:(FTRConfig * _Nonnull)config error:(NSError * _Nullable * _Nullable)error;
@end

@class TOTPParameters;
@class FTRTotp;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieves a Time-based One-Time Password (TOTP) based on the specified parameters.
/// This method generates a TOTP using the provided <code>TOTPParameters</code>. Upon successful generation, the <code>success</code> closure is called with an <code>FTRTotp</code> object containing the TOTP and its remaining validity period. In case of failure during the TOTP generation process, the <code>failure</code> closure is executed with an error detailing the reason for failure.
/// \param parameters An instance of <code>TOTPParameters</code> containing the necessary details for TOTP generation.
///
/// \param success A closure to be called upon successful TOTP generation. It provides an <code>FTRTotp</code> object containing the TOTP and its remaining validity period.
///
/// \param failure A closure to be called in case of a failure in generating the TOTP, providing an error describing the failure reason.
///
- (void)getTOTP:(TOTPParameters * _Nonnull)parameters success:(void (^ _Nonnull)(FTRTotp * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Method using Apple’s App Attest service to certify that  a valid instance of the app is installed. Upon completion, it calls the appropriate success or failure closure based on the outcome.
/// \param appId Team ID + App bundle identifier For example: T82Z6XGNMX.com.futurae.FuturaeDemo.
///
/// \param production A boolean value which indicates whether the app is in production mode (if built for testflight, app store)
///
/// \param success A closure called upon successful configuration switch.
///
/// \param failure A closure called in case of a failure in switching the lock configuration, providing an error describing the failure reason.
///
- (void)appAttestationWithAppId:(NSString * _Nonnull)appId production:(BOOL)production success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,introduced=14.0);
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Reply with approve or reject to an authentication using the provided parameters with success and failure callbacks.
/// \param parameters The authentication parameters.
///
/// \param success A closure called on successful reply operation.
///
/// \param failure A closure called if an error occurs during reply operation..
///
- (void)replyAuth:(AuthReplyParameters * _Nonnull)parameters success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Enrolls a user with the provided parameters.
/// This method initiates the enrollment process using the given <code>EnrollParameters</code>. On completion, either the <code>success</code> or <code>failure</code> callback is executed based on the outcome of the enrollment process.
/// \param parameters An instance of <code>EnrollParameters</code> containing the necessary details for enrollment.
///
/// \param success A closure to be called upon successful enrollment.
///
/// \param failure A closure to be called in case of an enrollment failure, providing an error describing the failure reason.
///
- (void)enroll:(EnrollParameters * _Nonnull)parameters success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit)) <FTRAdaptiveClientDelegate>
- (void)logCollectedData:(NSDictionary<NSString *, id> * _Nonnull)collectedData retry:(BOOL)retry;
@end

@class FTRKeychainConfig;
@class LockConfiguration;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// This method is deprecated.
/// warning:
/// Deprecated. Use <code>reset(appGroup:keychain:lockConfiguration)</code> instead.
/// Reset the SDK to a clean installation state. This will irreversibly reset the configuration and remove all accounts, keys, secrets, credentials and lock configurations from the SDK.
/// \param appGroup The app group parameter used when previously launching the SDK.
///
+ (void)resetWithAppGroup:(NSString * _Nullable)appGroup SWIFT_DEPRECATED_MSG("Use reset(appGroup:keychain:lockConfiguration) instead.");
/// Reset the SDK to a clean installation state. This will irreversibly reset the configuration and remove all accounts, keys, secrets, credentials and lock configurations from the SDK.
/// \param appGroup The app group parameter used when previously launching the SDK.
///
/// \param keychain Configuration settings for keychain access, defaulting to default configuration.
///
/// \param lockConfiguration Lock configuration settings.
///
+ (void)resetWithAppGroup:(NSString * _Nullable)appGroup keychain:(FTRKeychainConfig * _Nullable)keychain lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration;
- (void)clearDataFromDB:(BOOL)fromDB fromKeychain:(BOOL)fromKeychain;
@end

@class UnlockParameters;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Unlocks using the specified unlocking method and parameters.
/// This method initiates the unlock process using the given <code>UnlockParameters</code>. Upon completion, it calls the appropriate success or failure closure based on the outcome.
/// \param parameters An instance of <code>UnlockParameters</code> containing the necessary details for the unlocking process.
///
/// \param success A closure to be called upon successful unlocking.
///
/// \param failure A closure to be called in case of an unlocking failure, providing an error describing the failure reason.
///
- (void)unlock:(UnlockParameters * _Nonnull)parameters success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Locks the SDK, throwing an error if the locking process fails.
///
/// throws:
/// An error if the SDK or the component fails to lock.
- (BOOL)lockAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@class FTRMigrationCheckData;
@class MigrationParameters;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieves a list of accounts that are eligible for migration.
/// This method checks for accounts that can be migrated and returns the results through the <code>success</code> closure. If there is an error or issue in fetching the migratable accounts, the <code>failure</code> closure is called with an error detailing the issue.
/// \param success A closure called with <code>FTRMigrationCheckData</code> upon successful retrieval of migratable accounts. This data includes details about the accounts that can be migrated.
///
/// \param failure A closure called in case of a failure in retrieving migratable accounts, providing an error describing the failure reason.
///
- (void)getMigratableAccountsWithSuccess:(void (^ _Nonnull)(FTRMigrationCheckData * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Function to execute the Automatic Account Migration, and recover accounts enrolled in a previous installation or device.
/// For this method to succeed, the device must have valid migration data and no accounts were enrolled before calling this method.
/// This method initiates the migration of accounts using the given <code>MigrationParameters</code>. Upon successful migration, the <code>success</code> closure is executed with relevant data or confirmation. In case of failure during the migration process, the <code>failure</code> closure is called with an error providing details about the failure reason.
/// \param parameters An instance of <code>MigrationParameters</code> containing the necessary details for the migration process. Defaults to standard parameters if not specified.
///
/// \param success A closure to be called upon successful migration of accounts. It may provide additional success-related information or confirmation.
///
/// \param failure A closure to be called in case of a migration failure, providing an error describing the failure reason.
///
- (void)migrateAccounts:(MigrationParameters * _Nonnull)parameters success:(void (^ _Nonnull)(NSArray<FTRAccount *> * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

enum FTRQRCodeType : NSInteger;
@class OfflineQRCodeParameters;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Determines the type of a given QR code.
/// This method analyzes the provided QR code string and returns the corresponding <code>FTRQRCodeType</code>.
/// \param qrCode The QR code string to be analyzed.
///
///
/// returns:
/// The <code>FTRQRCodeType</code> corresponding to the QR code.
+ (enum FTRQRCodeType)qrCodeTypeFrom:(NSString * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a verification code for an offline QR code based on the specified parameters.
/// This method generates a verification code using the provided <code>OfflineQRCodeParameters</code>. Upon successful generation, the <code>success</code> closure is called with the verification code. In case of failure during the process, the <code>failure</code> closure is executed with an error detailing the reason for failure.
/// \param parameters An instance of <code>OfflineQRCodeParameters</code> containing the necessary details for generating the verification code.
///
/// \param success A closure to be called upon successful generation of the verification code.
///
/// \param failure A closure to be called in case of a failure in generating the verification code, providing an error describing the failure reason.
///
- (void)getOfflineQRVerificationCode:(OfflineQRCodeParameters * _Nonnull)parameters success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Extracts extra information from an offline QR code.
/// This method analyzes an offline QR code string and extracts additional information encoded within it. The extracted information is returned as an array of <code>FTRExtraInfo</code> objects, each representing a key-value pair of the extra data contained in the QR code.
/// \param QRCode The offline QR code string to be analyzed.
///
///
/// returns:
/// An array of <code>FTRExtraInfo</code> objects representing the additional information extracted from the QR code.
- (NSArray<FTRExtraInfo *> * _Nonnull)extraInfoFromOfflineQRCode:(NSString * _Nonnull)QRCode SWIFT_WARN_UNUSED_RESULT;
@end

@class SwitchLockParameters;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Switches to a new lock configuration based on the provided parameters.
/// This method allows changing the current lock configuration of the SDK to a new one as specified in <code>SwitchLockParameters</code>. This could involve switching to biometrics, passcode, SDK pin, or no lock at all. Upon completion, it calls the appropriate success or failure closure based on the outcome.
/// \param parameters An instance of <code>SwitchLockParameters</code> containing the new lock configuration and related details.
///
/// \param success A closure called upon successful configuration switch.
///
/// \param failure A closure called in case of a failure in switching the lock configuration, providing an error describing the failure reason.
///
- (void)switchToLockConfiguration:(SwitchLockParameters * _Nonnull)parameters success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Updates the SDK configuration with new settings for the app group and/or keychain.
/// This method allows updating the SDK’s operational settings, such as the app group identifier and keychain configuration. It’s useful for dynamically adjusting these settings post-initialization. The method executes either the success or failure closure based on the outcome of the update process.
/// \param appGroup An optional new app group identifier.
///
/// \param keychainConfig An optional new keychain configuration.
///
/// \param success A closure to be called upon successful configuration update. It may provide additional success-related information.
///
/// \param failure A closure to be called in case of a failure in updating the configuration, providing an error describing the failure reason.
///
- (void)updateSDKConfigWithAppGroup:(NSString * _Nullable)appGroup keychainConfig:(FTRKeychainConfig * _Nullable)keychainConfig success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Activate the biometric authentication as a means of convenience to verify the user presence, so that the user doesn’t have to enter the Pin to unlock the SDK.
/// This method is only availble when the SDK lock configuration type is <code>LockConfigurationTypeSDKPinWithBiometricsOptional</code>.
///
/// throws:
/// An error if the activation of biometrics fails.
- (BOOL)activateBiometricsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Deactivate biometrics as an authentication method.
/// This function revokes the biometric authentication capability for unlocking the SDK. This method is only availble when the SDK lock configuration type is <code>LockConfigurationTypeSDKPinWithBiometricsOptional</code>.
///
/// throws:
/// An error if the deactivation of biometrics fails.
- (BOOL)deactivateBiometricsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Changes the SDK-specific pin.
/// This method allows the user to change the SDK-specific pin. On completion, either the <code>success</code> or <code>failure</code> callback is executed based on the outcome of the  process.
/// \param newSDKPin The new SDK pin to be set.
///
/// \param success A closure to be called upon successful change of the SDK pin.
///
/// \param failure A closure to be called in case of a failure in changing the SDK pin, providing an error describing the failure reason.
///
- (void)changeSDKPinWithNewSDKPin:(NSString * _Nonnull)newSDKPin success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@class FTRNotificationData;
@class NSData;
@protocol FTRNotificationDelegate;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieve data  for a Custom In-App Messaging notification
/// \param notificationId identifier of the Custom In-App Messaging notification.
///
- (void)getNotificationData:(NSString * _Nonnull)notificationId success:(void (^ _Nonnull)(FTRNotificationData * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Register push notifications token.
/// \param deviceToken push notification token obtained from APN.
///
- (void)registerPushToken:(NSData * _Nonnull)deviceToken success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Handle a received push notification, and perform the required action.
/// This method is protected if the session contains <code>extra_info</code>. If that’s the case, the SDK needs to be unlocked by verifying the user presence, prior to handling the push notification.
/// \param payload received push notification payload.
///
/// \param delegate delegate to be notified about the operation result.
///
- (void)handleNotification:(NSDictionary * _Nonnull)payload delegate:(id <FTRNotificationDelegate> _Nullable)delegate;
@end

@class SessionParameters;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieves information for a specific session based on the given parameters.
/// This protected method fetches the details of a session identified by <code>SessionParameters</code>. Upon successful retrieval, the <code>success</code> closure is called with an <code>FTRSession</code> object containing the session details. In case of failure during the retrieval process, the <code>failure</code> closure is executed with an error providing details about the failure reason.
/// \param parameters An instance of <code>SessionParameters</code> containing the session ID or token and associated user ID for which the session information is requested.
///
/// \param success A closure to be called upon successful retrieval of session information. It provides an <code>FTRSession</code> object containing the session details.
///
/// \param failure A closure to be called in case of a failure in retrieving session information, providing an error describing the failure reason.
///
- (void)getSessionInfo:(SessionParameters * _Nonnull)parameters success:(void (^ _Nonnull)(FTRSession * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method is deprecated.
/// warning:
/// Deprecated. Use <code>getSessionInfoWithoutUnlock</code> instead.
/// Retrieves information for a specific session based on the given parameters. This is a non-protected operation, but in order to be successful the respective FF must be true,
/// otherwise, this is going to fail with error code <code>SDKApiErrorCode.authorizationFailed</code>.
/// This method fetches the details of a session identified by <code>SessionParameters</code>. Upon successful retrieval, the <code>success</code> closure is called with an <code>FTRSession</code> object containing the session details. In case of failure during the retrieval process, the <code>failure</code> closure is executed with an error providing details about the failure reason.
/// \param parameters An instance of <code>SessionParameters</code> containing the session ID or token and associated user ID for which the session information is requested.
///
/// \param success A closure to be called upon successful retrieval of session information. It provides an <code>FTRSession</code> object containing the session details.
///
/// \param failure A closure to be called in case of a failure in retrieving session information, providing an error describing the failure reason.
///
- (void)getSessionInfoUnprotected:(SessionParameters * _Nonnull)parameters success:(void (^ _Nonnull)(FTRSession * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieves information for a specific session based on the given parameters. This is a non-protected operation, but in order to be successful the respective FF must be true,
/// otherwise, this is going to fail with error code <code>SDKApiErrorCode.authorizationFailed</code>.
/// This method fetches the details of a session identified by <code>SessionParameters</code>. Upon successful retrieval, the <code>success</code> closure is called with an <code>FTRSession</code> object containing the session details. In case of failure during the retrieval process, the <code>failure</code> closure is executed with an error providing details about the failure reason.
/// \param parameters An instance of <code>SessionParameters</code> containing the session ID or token and associated user ID for which the session information is requested.
///
/// \param success A closure to be called upon successful retrieval of session information. It provides an <code>FTRSession</code> object containing the session details.
///
/// \param failure A closure to be called in case of a failure in retrieving session information, providing an error describing the failure reason.
///
- (void)getSessionInfoWithoutUnlock:(SessionParameters * _Nonnull)parameters success:(void (^ _Nonnull)(FTRSession * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Retrieves all accounts.
/// This method fetches all accounts stored locally and returns them as an array of <code>FTRAccount</code> objects.
///
/// throws:
/// An error if there is an issue in fetching the accounts.
///
/// returns:
/// An array of <code>FTRAccount</code> objects representing all accounts.
- (NSArray<FTRAccount *> * _Nullable)getAccountsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a specific account by its user identifier.
/// This method fetches the account associated with the provided user identifier and returns it as an <code>FTRAccount</code> object.
/// \param userId The user identifier of the account to retrieve.
///
///
/// throws:
/// An error if the account cannot be found or if there is an issue in fetching the account.
///
/// returns:
/// An <code>FTRAccount</code> object representing the requested account.
- (FTRAccount * _Nullable)getAccountByUserId:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Logs out the specified account.
/// This method performs the necessary actions to log out the specified <code>FTRAccount</code>.
/// \param account The <code>FTRAccount</code> to be logged out.
///
/// \param success A closure called on successful logout.
///
/// \param failure A closure called if an error occurs during logout.
///
- (void)logoutAccount:(FTRAccount * _Nonnull)account success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Delete user account from the SDK.
/// This is a method that forcefully removes account from the SDK DB.
/// To perform logout under the normal circumstances, please use the designated method <code>logoutUser:callback:</code>.
/// The reason to use this method might be case when account is remotely unenrolled but treated as enrolled by the SDK.
/// \param account The <code>FTRAccount</code> to be deleted.
///
///
/// throws:
/// An error if there is an issue in deleting the account.
- (BOOL)deleteAccount:(FTRAccount * _Nonnull)account error:(NSError * _Nullable * _Nullable)error;
/// Retrieves the status of multiple accounts.
/// This method fetches the status for an array of <code>FTRAccount</code> objects. The result is provided through the <code>success</code> closure. If there is an error or issue in fetching the accounts’ status, the <code>failure</code> closure is called with an error detailing the issue.
/// \param accounts An array of <code>FTRAccount</code> objects whose status needs to be retrieved.
///
/// \param success A closure called with <code>FTRAccountsStatus</code> upon successful retrieval of accounts’ status.
///
/// \param failure A closure called in case of a failure in retrieving the accounts’ status, providing an error describing the failure reason.
///
- (void)getAccountsStatus:(NSArray<FTRAccount *> * _Nonnull)accounts success:(void (^ _Nonnull)(FTRAccountsStatus * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Retrieves the history of a specific account.
/// This method fetches the historical activities for the specified <code>FTRAccount</code>. The history is provided through the <code>success</code> closure. In case of a failure or issue in fetching the account history, the <code>failure</code> closure is called with an error detailing the issue.
/// \param account The <code>FTRAccount</code> whose history needs to be retrieved.
///
/// \param success A closure called with <code>FTRAccountHistory</code> upon successful retrieval of the account’s history.
///
/// \param failure A closure called in case of a failure in retrieving the account’s history, providing an error describing the failure reason.
///
- (void)getAccountHistory:(FTRAccount * _Nonnull)account success:(void (^ _Nonnull)(FTRAccountHistory * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@protocol FTRUserPresenceDelegate;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull baseURL;
/// Enables logging for the SDK.
/// When logging is enabled, the SDK will log information about its operations,
/// which can be useful for debugging purposes.
/// Note: Logging is disabled by default. Enabling should be done before launching the SDK.
+ (void)enableLogging;
/// Disables logging for the SDK.
/// When logging is disabled, no operational information will be logged.
/// Note: Logging is disabled by default.
+ (void)disableLogging;
- (void)logAnalyticsData:(NSDictionary<NSString *, id> * _Nonnull)analyticsData success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)setUserPresenceDelegate:(id <FTRUserPresenceDelegate> _Nullable)delegate;
/// Check if SDK data exists for the specified configuration
/// \param appGroup The app group parameter.
///
/// \param keychainConfig The keychain configuration object. If nil is passed default keychain configuration will be applied.
///
/// \param lockConfiguration The lock configuration object.
///
+ (BOOL)checkDataExistsForAppGroup:(NSString * _Nullable)appGroup keychainConfig:(FTRKeychainConfig * _Nullable)keychainConfig lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Decrypt extra info that is encrypted and provided from the push notification content
/// \param encryptedExtraInfo value of <code>extra_info_enc</code> key from the notification user info dictionary.
///
/// \param userId The account’s Futurae user id.
///
///
/// returns:
/// The decrypted extra info as an array of key value pairs.
- (NSArray<FTRExtraInfo *> * _Nullable)decryptExtraInfo:(NSString * _Nonnull)encryptedExtraInfo userId:(NSString * _Nonnull)userId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Submit public key of this SDK to futurae service
/// This function is not intended for use under normal circumstances.
/// It can be used to repair very specific SDK to webapp communication errors.
/// \param success callback for successful PK submission
///
/// \param failure callback for failed PK submission
///
- (void)submitPublicKeyWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

@protocol FTRAdaptiveSDKDelegate;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Disable adaptive mechanism for data collections, authentication and account migration.
- (void)disableAdaptive;
/// Enable adaptive mechanism for data collections, authentication and account migration. For more granular functionality use methods <code>enableAdaptiveCollections</code>, <code>enableAdaptiveSubmissionOnAuthentication</code> and <code>enableAdaptiveSubmissionOnAccountMigration</code>.
/// \param delegate An object that conforms to the FTRAdaptiveSDKDelegate protocol.
///
- (void)enableAdaptiveWithDelegate:(id <FTRAdaptiveSDKDelegate> _Nonnull)delegate;
/// Enable adaptive mechanism for data collections.
/// \param delegate An object that conforms to the FTRAdaptiveSDKDelegate protocol.
///
- (void)enableAdaptiveCollectionsWithDelegate:(id <FTRAdaptiveSDKDelegate> _Nonnull)delegate;
/// Disable adaptive mechanism for data collections.
- (void)disableAdaptiveCollections;
/// Trigger an adaptive data collection.
- (void)collectAndSubmitObservations;
/// Check if adaptive mechanism is enabled.
///
/// returns:
/// A boolean value indicating if adaptive is enabled
@property (nonatomic, readonly) BOOL isAdaptiveEnabled;
/// Enable adaptive mechanism for authentications.
- (BOOL)enableAdaptiveSubmissionOnAuthenticationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Enable adaptive mechanism for account migration.
- (BOOL)enableAdaptiveSubmissionOnAccountMigrationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disable adaptive mechanism for authentications.
- (void)disableAdaptiveSubmissionOnAuthentication;
/// Disable adaptive mechanism for account migration.
- (void)disableAdaptiveSubmissionOnAccountMigration;
/// Check if adaptive mechanism is enabled for authentications.
///
/// returns:
/// A boolean value indicating if adaptive  is enabled for authentications
@property (nonatomic, readonly) BOOL isAdaptiveSubmissionOnAuthenticationEnabled;
/// Check if adaptive mechanism is enabled for account migration.
///
/// returns:
/// A boolean value indicating if adaptive  is enabled for account migration
@property (nonatomic, readonly) BOOL isAdaptiveSubmissionMigrationEnabled;
/// When a collection is requested, set the time in seconds for which the last adaptive collection should be returned until a new collection starts.
/// \param threshold Threshold in seconds.
///
- (BOOL)setAdaptiveTimeThreshold:(NSInteger)threshold error:(NSError * _Nullable * _Nullable)error;
/// The SDK will send adaptive collections to the backend, if adaptive mechanism is enabled.
/// If for some reason sending the collections fails, they will move to a pending collection list and the SDK will try to send them again upon next launch.
///
/// returns:
/// Array of adaptive collections that are pending sending to backend
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull pendingAdaptiveCollections;
@end

@protocol FTRClientDelegate;
@class SDKState;
@class JailbreakStatus;
@interface FTRClient (SWIFT_EXTENSION(FuturaeKit))
/// Query the SDK to find out whether it has launched.
///
/// returns:
/// <code>true</code> if the SDK has launched, otherwise returns <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL sdkIsLaunched;)
+ (BOOL)sdkIsLaunched SWIFT_WARN_UNUSED_RESULT;
/// Set delegate for receving SDK updates such as SDK status change.
/// \param delegate An object that conforms to the FTRClientDelegate protocol.
///
+ (void)setDelegate:(id <FTRClientDelegate> _Nullable)delegate;
/// Query the SDK to find out whether it is unlocked.
///
/// returns:
/// <code>true</code> if the SDK is locked, otherwise returns <code>false</code>.
@property (nonatomic, readonly) BOOL isLocked;
/// Returns a list of <code>UnlockMethodType</code> enum values that the SDK can currently be unlocked with.
/// The mapping of the returned numbers is:
/// <ul>
///   <li>
///     UnlockMethodType.biometrics = 1
///   </li>
///   <li>
///     UnlockMethodType.biometricsOrPasscode = 2
///   </li>
///   <li>
///     UnlockMethodType.sdkPin = 3
///   </li>
///   <li>
///     UnlockMethodType.none = 4
///   </li>
/// </ul>
///
/// returns:
/// An array of <code>Int</code> values for the currently active unlock methods, which can be used to verify the user presence and therefore unlock the SDK.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull activeUnlockMethodsValues;
///
/// returns:
/// The currently set lock configuration for the SDK
@property (nonatomic, readonly, strong) LockConfiguration * _Nonnull currentLockConfiguration;
/// Get information about the state of the SDK , such as lock status and remaining unlocked duration.
///
/// returns:
/// <code>SDKState</code> object
@property (nonatomic, readonly, strong) SDKState * _Nonnull sdkState;
/// Check if the device’s biometrics settings have been changed, which renders the SDK biometrics invalid.
///
/// returns:
/// <code>true</code> if the biometrics keys have been changed, othewise returns <code>false</code>.
@property (nonatomic, readonly) BOOL haveBiometricsChanged;
/// Method used to determine the jailbreak status of the device
///
/// returns:
/// <code>JailbreakStatus</code> object with the jailbreak status and a message for which jailbreak indicator was detected
@property (nonatomic, readonly, strong) JailbreakStatus * _Nonnull jailbreakStatus;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientVersion;)
+ (NSString * _Nonnull)clientVersion SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if current build is beta and false otherwise.
@property (nonatomic, readonly) BOOL isBeta;
@end

SWIFT_PROTOCOL("_TtP10FuturaeKit17FTRClientDelegate_")
@protocol FTRClientDelegate
- (void)didUpdateStatusWithStatus:(enum SDKStatus)status;
@end

/// <code>FTRConfig</code> is a class that encapsulates the configuration settings for the SDK.
SWIFT_CLASS("_TtC10FuturaeKit9FTRConfig")
@interface FTRConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkId;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
@property (nonatomic, readonly, copy) NSString * _Nullable appGroup;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull capabilities;
@property (nonatomic, readonly, strong) FTRKeychainConfig * _Nonnull keychain;
@property (nonatomic, readonly, strong) LockConfiguration * _Nonnull lockConfiguration;
@property (nonatomic, readonly) BOOL sslPinning;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultBaseUrl;)
+ (NSString * _Nonnull)defaultBaseUrl SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new <code>FTRConfig</code> instance with the specified parameters.
/// \param sdkId The unique identifier for the SDK.
///
/// \param sdkKey The key associated with the SDK.
///
/// \param baseUrl The base URL for network requests, defaulting to <code>FTRConfig.defaultBaseUrl</code>.
///
/// \param keychain Configuration settings for keychain access, defaulting to default configuration.
///
/// \param lockConfiguration Lock configuration settings.
///
/// \param appGroup The app group identifier, optional.
///
/// \param sslPinning Configuration setting for SSL Pinning, enabled by default.
///
- (nonnull instancetype)initWithSdkId:(NSString * _Nonnull)sdkId sdkKey:(NSString * _Nonnull)sdkKey baseUrl:(NSString * _Nonnull)baseUrl keychain:(FTRKeychainConfig * _Nonnull)keychain lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration appGroup:(NSString * _Nullable)appGroup sslPinning:(BOOL)sslPinning OBJC_DESIGNATED_INITIALIZER;
/// Validates the current configuration.
///
/// returns:
/// <code>true</code> if the configuration is valid, <code>false</code> otherwise.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>FTRExtraInfo</code> class represents a key-value pair for additional information.
SWIFT_CLASS("_TtC10FuturaeKit12FTRExtraInfo")
@interface FTRExtraInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Initializes a new <code>FTRExtraInfo</code> instance with the provided key and value.
/// \param key The key for the extra information.
///
/// \param value The value associated with the key.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Converts a dictionary into an array of <code>FTRExtraInfo</code> objects.
/// \param dictionary A dictionary, typically containing key-value pairs.
///
///
/// returns:
/// An array of <code>FTRExtraInfo</code> objects created from the dictionary.
+ (NSArray<FTRExtraInfo *> * _Nonnull)extraInfoArrayFromDictionary:(id _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FTRParam;
/// <code>FTRFeatureFlag</code> class represents a feature flag, providing its status and additional parameters.
SWIFT_CLASS("_TtC10FuturaeKit14FTRFeatureFlag")
@interface FTRFeatureFlag : NSObject
/// A unique identifier for the feature flag.
@property (nonatomic, readonly) NSInteger id;
/// A Boolean value indicating whether the feature flag is enabled.
@property (nonatomic, readonly) BOOL enabled;
/// The name of the feature flag.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// An optional array of <code>FTRParam</code> objects providing additional parameters related to the feature flag.
/// This may be nil if there are no additional parameters.
@property (nonatomic, readonly, copy) NSArray<FTRParam *> * _Nullable params;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FTRKeychainItemAccessibility : NSInteger;
/// <code>FTRKeychainConfig</code> class represents the configuration settings for keychain access in the SDK.
SWIFT_CLASS("_TtC10FuturaeKit17FTRKeychainConfig")
@interface FTRKeychainConfig : NSObject
/// The access group attribute for the keychain items, used to share keychain items among different applications.
@property (nonatomic, readonly, copy) NSString * _Nullable accessGroup;
/// The accessibility level for the keychain items, defining when the keychain items can be accessed.
@property (nonatomic, readonly) enum FTRKeychainItemAccessibility itemsAccessibility;
/// Initializes a new <code>FTRKeychainConfig</code> with specified parameters.
/// \param accessGroup The access group attribute for the keychain items. Default is nil.
///
/// \param itemsAccessibility The accessibility level for the keychain items. Defaults to the value returned by <code>defaultAccessibility()</code>.
///
- (nonnull instancetype)initWithAccessGroup:(NSString * _Nullable)accessGroup itemsAccessibility:(enum FTRKeychainItemAccessibility)itemsAccessibility OBJC_DESIGNATED_INITIALIZER;
/// Creates a default keychain configuration.
///
/// returns:
/// A default <code>FTRKeychainConfig</code> instance.
+ (FTRKeychainConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Returns the default accessibility level for keychain items.
///
/// returns:
/// The default <code>FTRKeychainItemAccessibility</code> value.
+ (enum FTRKeychainItemAccessibility)defaultAccessibility SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumerates the accessibility levels for keychain items in the SDK.
typedef SWIFT_ENUM(NSInteger, FTRKeychainItemAccessibility, open) {
  FTRKeychainItemAccessibilityWhenPasscodeSetThisDeviceOnly = 0,
  FTRKeychainItemAccessibilityWhenUnlockedThisDeviceOnly = 1,
  FTRKeychainItemAccessibilityAfterFirstUnlockThisDeviceOnly = 2,
};

typedef SWIFT_ENUM(NSInteger, FTRMessageLevel, open) {
  FTRMessageLevelUnknown = 0,
  FTRMessageLevelInfo = 1,
  FTRMessageLevelWarning = 2,
  FTRMessageLevelDialog = 3,
  FTRMessageLevelBanner = 4,
  FTRMessageLevelError = 5,
};

/// <code>FTRMigratableAccount</code> class represents an individual account that is eligible for migration.
SWIFT_CLASS("_TtC10FuturaeKit20FTRMigratableAccount")
@interface FTRMigratableAccount : NSObject
/// The user identifier for the account.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The username associated with the account. This may be nil if the username is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable username;
/// If account has trusted session binding requirement for account migration.
@property (nonatomic, readonly) BOOL accountRecoveryFlowBindingEnabled;
/// User device id
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>FTRMigrationCheckData</code> class provides information about the accounts that are eligible for migration.
SWIFT_CLASS("_TtC10FuturaeKit21FTRMigrationCheckData")
@interface FTRMigrationCheckData : NSObject
/// The total number of accounts that are eligible for migration.
@property (nonatomic, readonly) NSInteger numberOfAccountsToMigrate;
/// A Boolean value indicating whether the migration process is protected by a pin.
@property (nonatomic, readonly) BOOL pinProtected;
/// A Boolean value indicating whether adaptive migration is enabled for the migration process.
@property (nonatomic, readonly) BOOL adaptiveMigrationEnabled;
/// An array of <code>FTRMigratableAccount</code> objects representing the accounts that can be migrated. Each object contains details about an individual account eligible for migration.
@property (nonatomic, readonly, copy) NSArray<FTRMigratableAccount *> * _Nonnull migratableAccounts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
/// <code>FTRNotificationAuth</code> class represents a notification-based authentication request.
SWIFT_CLASS("_TtC10FuturaeKit19FTRNotificationAuth")
@interface FTRNotificationAuth : NSObject
/// A unique identifier for the session associated with this authentication request.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// The user identifier for whom the authentication request is intended.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// An optional array of integers representing a multi-numbered challenge for authentication.
/// This is used in scenarios where multi-numbered challenge authentication is required.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable multiNumberedChallenge;
/// An optional array of <code>FTRExtraInfo</code> objects providing additional information related to the authentication request.
@property (nonatomic, copy) NSArray<FTRExtraInfo *> * _Nullable extraInfo;
/// The authentication type
@property (nonatomic, copy) NSString * _Nullable type;
/// An optional timeout value (as an <code>NSNumber</code>) indicating the time within which the authentication request should be addressed.
@property (nonatomic, readonly, strong) NSNumber * _Nullable timeout;
/// An optional session timeout value (as an <code>NSNumber</code>) indicating the maximum duration for which the session is valid.
@property (nonatomic, readonly, strong) NSNumber * _Nullable sessionTimeout;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10FuturaeKit19FTRNotificationData")
@interface FTRNotificationData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The <code>FTRNotificationDelegate</code>’s methods allow the delegate to be informed when approve authentication attempts or user unenrolled actions are received via Push Notifications.
SWIFT_PROTOCOL("_TtP10FuturaeKit23FTRNotificationDelegate_")
@protocol FTRNotificationDelegate <NSObject>
/// Notifies the delegate that an approve authentication attempt has been received.
/// \param authenticationInfo An object with the respective info for the authentication.
///
- (void)approveAuthenticationReceived:(FTRNotificationAuth * _Nonnull)authenticationInfo;
/// Notifies the delegate that a user account was unenrolled.
/// \param userId Id of the unenrolled user.
///
- (void)unenrollUserReceived:(NSString * _Nonnull)userId;
/// Notifies the delegate that an error occurred when processing the push notification payload.
/// \param error An <code>Error</code> object describing the error.
///
- (void)notificationError:(NSError * _Nonnull)error;
/// Notifies the delegate that a QR code authentication has been requested for an enrolled account.
- (void)qrCodeScanRequested:(NSString * _Nonnull)sessionId :(NSString * _Nonnull)userId :(NSTimeInterval)timeout;
/// Notifies the delegate that the data for a Custom In-App Messaging notification has been received.
- (void)notificationDataReceived:(FTRNotificationData * _Nonnull)notificationData;
@end

@class FTRURLAuth;
/// The <code>FTROpenURLDelegate</code>’s methods allow the delegate to be informed when authentication or
/// activation URLs are opened.
SWIFT_PROTOCOL("_TtP10FuturaeKit18FTROpenURLDelegate_")
@protocol FTROpenURLDelegate <NSObject>
/// Notifies the delegate that an authentication URL was just opened.
/// \param authenticationInfo An object with the respective authentication info.
///
- (void)authenticationURLOpened:(FTRURLAuth * _Nonnull)authenticationInfo;
/// Notifies the delegate that an activation URL was just opened.
/// \param userId A user id used for the activation.
///
- (void)activationURLOpened:(NSString * _Nonnull)userId;
/// Notifies the delegate that an error occurred when processing the URL just opened.
/// \param error An <code>Error</code> object describing the error.
///
- (void)openURLError:(NSError * _Nonnull)error;
@end

/// <code>FTRParam</code> class represents additional parameters for a feature flag.
SWIFT_CLASS("_TtC10FuturaeKit8FTRParam")
@interface FTRParam : NSObject
/// A Boolean value indicating whether the parameter is enabled.
@property (nonatomic, readonly) BOOL enabled;
/// An array of service identifiers to which this parameter is applicable.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull serviceIds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureVideoPreviewLayer;
@class AVCaptureDeviceInput;
@class AVCaptureMetadataOutput;
@class AVMetadataObject;
@class AVCaptureConnection;
SWIFT_CLASS("_TtC10FuturaeKit15FTRQRCodeReader")
@interface FTRQRCodeReader : NSObject <AVCaptureMetadataOutputObjectsDelegate>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull metadataObjectTypes;
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * _Nonnull previewLayer;
@property (nonatomic, strong) AVCaptureDeviceInput * _Nullable defaultDeviceInput;
@property (nonatomic, strong) AVCaptureDeviceInput * _Nullable frontDeviceInput;
@property (nonatomic, strong) AVCaptureMetadataOutput * _Nonnull metadataOutput;
+ (FTRQRCodeReader * _Nonnull)reader SWIFT_WARN_UNUSED_RESULT;
+ (FTRQRCodeReader * _Nonnull)readerWithMetadataObjectTypes:(NSArray<NSString *> * _Nonnull)metadataObjectTypes SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAvailable SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)supportsMetadataObjectTypes:(NSArray<NSString *> * _Nonnull)metadataObjectTypes SWIFT_WARN_UNUSED_RESULT;
+ (AVCaptureVideoOrientation)videoOrientationFromInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMetadataObjectTypes:(NSArray<NSString *> * _Nonnull)metadataObjectTypes OBJC_DESIGNATED_INITIALIZER;
- (void)startScanning;
- (void)stopScanning;
- (BOOL)running SWIFT_WARN_UNUSED_RESULT;
- (void)switchDeviceInput;
- (BOOL)hasFrontDevice SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTorchAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)toggleTorch;
- (void)setCompletionWithBlock:(void (^ _Nonnull)(NSString * _Nullable))completionBlock;
- (void)captureOutput:(AVCaptureMetadataOutput * _Nonnull)output didOutputMetadataObjects:(NSArray<AVMetadataObject *> * _Nonnull)metadataObjects fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

/// Enumerates the types of QR codes recognized by the SDK.
typedef SWIFT_ENUM(NSInteger, FTRQRCodeType, open) {
  FTRQRCodeTypeEnrollment = 0,
  FTRQRCodeTypeOnlineAuth = 1,
  FTRQRCodeTypeOfflineAuth = 2,
  FTRQRCodeTypeInvalid = 3,
  FTRQRCodeTypeUsernameless = 4,
};

/// <code>FTRSession</code> class represents a session with various parameters including the authentication factor, user and session identifiers, and additional information.
SWIFT_CLASS("_TtC10FuturaeKit10FTRSession")
@interface FTRSession : NSObject
/// The authentication factor used in the session.
@property (nonatomic, readonly, copy) NSString * _Nonnull factor;
/// The user identifier associated with the session, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// An array of <code>FTRExtraInfo</code> objects providing additional information related to the session.
@property (nonatomic, readonly, copy) NSArray<FTRExtraInfo *> * _Nullable extraInfo;
/// The service identifier associated with the session, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable serviceId;
/// A unique identifier for the session.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
/// The timeout for the session in seconds.
@property (nonatomic, readonly) NSInteger sessionTimeout;
/// A token unique to this session.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionToken;
/// The duration of the session in seconds.
@property (nonatomic, readonly) NSInteger timeout;
/// Indicates whether approve-combo is enabled for the session.
@property (nonatomic, readonly) BOOL approveCombo;
/// The type of session, if specified.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// An array of integers representing a multi-numbered challenge for the session, if used.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable multiNumberedChallenge;
- (nonnull instancetype)initWithFactor:(NSString * _Nonnull)factor userId:(NSString * _Nullable)userId extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo serviceId:(NSString * _Nullable)serviceId sessionId:(NSString * _Nullable)sessionId sessionTimeout:(NSInteger)sessionTimeout sessionToken:(NSString * _Nullable)sessionToken timeout:(NSInteger)timeout approveCombo:(BOOL)approveCombo type:(NSString * _Nullable)type multiNumberedChallenge:(NSArray<NSNumber *> * _Nullable)multiNumberedChallenge OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>FTRTotp</code> class represents a Time-based One-Time Password (TOTP) along with its remaining validity period.
SWIFT_CLASS("_TtC10FuturaeKit7FTRTotp")
@interface FTRTotp : NSObject
/// The TOTP value as a string.
@property (nonatomic, readonly, copy) NSString * _Nonnull totp;
/// A string representing the number of seconds remaining before the current TOTP expires.
/// This is useful for displaying a countdown or refreshing the TOTP after expiration.
@property (nonatomic, readonly, copy) NSString * _Nonnull remainingSecs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>FTRURLAuth</code> class represents an authentication request initiated via a URL.
SWIFT_CLASS("_TtC10FuturaeKit10FTRURLAuth")
@interface FTRURLAuth : NSObject
/// The user identifier associated with the URL authentication request.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// A session token unique to this URL authentication request.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionToken;
/// The username associated with the request, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable username;
/// The name of the service for which the authentication is requested, if available.
@property (nonatomic, readonly, copy) NSString * _Nullable serviceName;
@property (nonatomic, copy) NSString * _Nullable successUrlCallback;
/// A URL to be called upon failed authentication.
@property (nonatomic, copy) NSString * _Nullable failureUrlCallback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FTRURLType, open) {
  FTRURLTypeActivation = 0,
  FTRURLTypeAuthentication = 1,
  FTRURLTypeUnknown = 2,
};

enum UserPresenceVerificationType : NSInteger;
SWIFT_PROTOCOL("_TtP10FuturaeKit23FTRUserPresenceDelegate_")
@protocol FTRUserPresenceDelegate
- (enum UserPresenceVerificationType)userPresenceVerificationType SWIFT_WARN_UNUSED_RESULT;
@end

enum NotificationPayloadDataType : NSInteger;
@class NotificationPayloadData;
/// A utility class to parse values from QR codes and URIs.
SWIFT_CLASS("_TtC10FuturaeKit8FTRUtils")
@interface FTRUtils : NSObject
/// Extracts the user ID from a QR code string.
/// \param qrCode The QR code string from which to extract the user ID.
///
///
/// returns:
/// The user ID as a string if found, otherwise <code>nil</code>.
+ (NSString * _Nullable)userIdFromQRCode:(NSString * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Extracts the session token from a QR code string.
/// \param qrCode The QR code string from which to extract the session token.
///
///
/// returns:
/// The session token as a string if found, otherwise <code>nil</code>.
+ (NSString * _Nullable)sessionTokenFromQRCode:(NSString * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Extracts the user ID from a URI string.
/// \param uri The URI string from which to extract the user ID.
///
///
/// returns:
/// The user ID as a string if found, otherwise <code>nil</code>.
+ (NSString * _Nullable)userIdFromUri:(NSString * _Nonnull)uri SWIFT_WARN_UNUSED_RESULT;
/// Extracts the session token from a URI string.
/// \param uri The URI string from which to extract the session token.
///
///
/// returns:
/// The session token as a string if found, otherwise <code>nil</code>.
+ (NSString * _Nullable)sessionTokenFromUri:(NSString * _Nonnull)uri SWIFT_WARN_UNUSED_RESULT;
/// Determines the type of URL being handled.
/// This method analyzes the given URL to determine whether it’s related to activation, authentication, or an unknown type. Useful for deciding how to process the URL.
/// \param url The URL to analyze.
///
///
/// returns:
/// The determined <code>FTRURLType</code> (<code>.activation</code>, <code>.authentication</code>, or <code>.unknown</code>).
+ (enum FTRURLType)typeFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Extracts activation data from a given URL.
/// If the URL is an activation URL, this method parses it to extract the activation code and optionally a user ID, if present.
/// \param url The activation URL to parse.
///
///
/// returns:
/// An <code>ActivationURLData</code> object containing the activation code and user ID, or <code>nil</code> if the URL is invalid or the required information is missing.
+ (ActivationURLData * _Nullable)activationDataFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Extracts authentication data from a given URL.
/// If the URL is an authentication URL, this method parses it to extract the user ID and session token, which are needed to authenticate the user. Optionally, a redirect URI for mobile authentication may also be included.
/// \param url The authentication URL to parse.
///
///
/// returns:
/// An <code>AuthenticationURLData</code> object containing the user ID, session token, and optionally a mobile auth redirect URI, or <code>nil</code> if the URL is invalid or the required information is missing.
+ (AuthenticationURLData * _Nullable)authenticationDataFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Determines the type of notification payload being handled.
/// This method analyzes the given notification payload to determine whether it’s related to reply approve, qr code scanning,  arbitrary notification, unenroll  or an unknown type. Useful for deciding how to process the notification payload further.
/// \param payload The notification payload to parse.
///
///
/// returns:
/// The determined <code>NotificationPayloadDataType</code> (<code>.reply</code>, <code>.qrCode</code>, <code>.unenroll</code>, <code>arbitraryNotification</code> or <code>.unknown</code>).
+ (enum NotificationPayloadDataType)typeFromNotificationPayload:(NSDictionary * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Extracts notification info from a given push notification payload.
/// This method parses the notification payload to extract user ID and other relevant info from the notification payload if present.
/// \param payload The notification payload to parse.
///
///
/// returns:
/// An <code>NotificationPayloadData</code> object containing user ID and other relevant info from the notification payload if present.
+ (NotificationPayloadData * _Nonnull)notificationInfoFromPayload:(NSDictionary * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// <code>JailbreakStatus</code> class represents the jailbreak status of the device.
SWIFT_CLASS("_TtC10FuturaeKit15JailbreakStatus")
@interface JailbreakStatus : NSObject
/// A Boolean indicating whether the device is jailbroken.
@property (nonatomic, readonly) BOOL jailbroken;
/// An optional message providing additional information about the jailbreak status.
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum LockConfigurationType : NSInteger;
@class SDKPinConfiguration;
/// <code>LockConfiguration</code> class represents the configuration settings for locking mechanisms in the SDK.
SWIFT_CLASS("_TtC10FuturaeKit17LockConfiguration")
@interface LockConfiguration : NSObject
/// The type of lock configuration.
@property (nonatomic, readonly) enum LockConfigurationType type;
/// The duration for which the SDK or resource remains unlocked.
@property (nonatomic, readonly) NSTimeInterval unlockDuration;
/// A Boolean indicating whether the lock should be invalidated by biometric changes.
@property (nonatomic, readonly) BOOL invalidatedByBiometricsChange;
/// An object for configuring SDK Pin behaviour
@property (nonatomic, readonly, strong) SDKPinConfiguration * _Nonnull pinConfiguration;
/// \param type The type of lock configuration.
///
/// \param unlockDuration The duration for which the lock remains open.
///
/// \param invalidatedByBiometricsChange Indicates if lock is invalidated by biometrics change.
///
/// \param pinConfiguration SDK Pin behaviour configuration object.
///
- (nonnull instancetype)initWithType:(enum LockConfigurationType)type unlockDuration:(NSTimeInterval)unlockDuration invalidatedByBiometricsChange:(BOOL)invalidatedByBiometricsChange pinConfiguration:(SDKPinConfiguration * _Nonnull)pinConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumerates the types of lock configurations available in the SDK.
typedef SWIFT_ENUM(NSInteger, LockConfigurationType, open) {
  LockConfigurationTypeNone = 1,
  LockConfigurationTypeBiometricsOnly = 2,
  LockConfigurationTypeBiometricsOrPasscode = 3,
  LockConfigurationTypeSdkPinWithBiometricsOptional = 4,
};

@class MigrationDefault;
@class MigrationSDKPin;
/// <code>MigrationParameters</code> class encapsulates the parameters required for migration processes.
SWIFT_CLASS("_TtC10FuturaeKit19MigrationParameters")
@interface MigrationParameters : NSObject
/// The SDK-specific pin, used if the migration process involves an SDK-specific pin.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkPin;
/// Optional flow binding token  used during migration.
@property (nonatomic, copy) NSString * _Nullable bindingToken;
/// Creates default migration parameters.
///
/// returns:
/// An instance of <code>MigrationDefault</code>.
+ (MigrationDefault * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Creates migration parameters with an SDK-specific pin.
/// \param sdkPin The SDK-specific pin for the migration process.
///
///
/// returns:
/// An instance of <code>MigrationSDKPin</code>.
+ (MigrationSDKPin * _Nonnull)withSdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
/// Creates default migration parameters.
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>MigrationDefault</code>.
+ (MigrationDefault * _Nonnull)defaultWithBindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
/// Creates migration parameters with an SDK-specific pin.
/// \param sdkPin The SDK-specific pin for the migration process.
///
/// \param bindingToken The token for the flow binding.
///
///
/// returns:
/// An instance of <code>MigrationSDKPin</code>.
+ (MigrationSDKPin * _Nonnull)withSdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents default migration parameters.
SWIFT_CLASS("_TtC10FuturaeKit16MigrationDefault")
@interface MigrationDefault : MigrationParameters
/// Initializes a new instance of <code>MigrationDefault</code> with default parameters.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Initializes a new instance of <code>MigrationDefault</code> with a binding token.
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithBindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents migration parameters that include an SDK-specific pin.
SWIFT_CLASS("_TtC10FuturaeKit15MigrationSDKPin")
@interface MigrationSDKPin : MigrationParameters
/// Initializes a new instance with the provided SDK-specific pin for the migration process.
/// \param sdkPin The SDK-specific pin for the migration process.
///
- (nonnull instancetype)initWithSdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new instance with the provided SDK-specific pin for the migration process.
/// \param sdkPin The SDK-specific pin for the migration process.
///
/// \param bindingToken The token for the flow binding.
///
- (nonnull instancetype)initWithSdkPin:(NSString * _Nonnull)sdkPin bindingToken:(NSString * _Nonnull)bindingToken OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC10FuturaeKit23NotificationPayloadData")
@interface NotificationPayloadData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable notificationId;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
@property (nonatomic, readonly, strong) NSNumber * _Nullable timeout;
@property (nonatomic, readonly, strong) NSNumber * _Nullable sessionTimeout;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable multiNumberedChallenge;
@property (nonatomic, readonly, copy) NSString * _Nullable authType;
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@property (nonatomic, readonly) BOOL hasExtra;
@property (nonatomic, readonly, copy) NSString * _Nullable encryptedExtraInfo;
@property (nonatomic, readonly) enum NotificationPayloadDataType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, NotificationPayloadDataType, open) {
  NotificationPayloadDataTypeUnknown = 0,
  NotificationPayloadDataTypeReply = 1,
  NotificationPayloadDataTypeQrCode = 2,
  NotificationPayloadDataTypeUnenroll = 3,
  NotificationPayloadDataTypeArbitraryNotification = 4,
};

@class OfflineQRCodeDefault;
@class OfflineQRCodeSDKPin;
@class OfflineQRCodeSDKPinWithBiometrics;
/// <code>OfflineQRCodeParameters</code> class encapsulates the parameters required for processing an offline QR code.
SWIFT_CLASS("_TtC10FuturaeKit23OfflineQRCodeParameters")
@interface OfflineQRCodeParameters : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull qrCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkPin;
@property (nonatomic, readonly, copy) NSString * _Nonnull promptReason;
/// Creates default offline QR code parameters with the provided QR code.
/// \param qrCode The QR code string to be processed.
///
///
/// returns:
/// An instance of <code>OfflineQRCodeDefault</code>.
+ (OfflineQRCodeDefault * _Nonnull)withQrCode:(NSString * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Creates offline QR code parameters with the provided QR code and SDK-specific pin.
/// \param qrCode The QR code string to be processed.
///
/// \param sdkPin The SDK-specific pin for processing the QR code.
///
///
/// returns:
/// An instance of <code>OfflineQRCodeSDKPin</code>.
+ (OfflineQRCodeSDKPin * _Nonnull)withQrCode:(NSString * _Nonnull)qrCode sdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
/// Creates offline QR code parameters with the provided QR code and a prompt message for biometric authentication.
/// \param qrCode The QR code string to be processed.
///
/// \param promptReason A message or reason for prompting the user’s biometric authentication.
///
///
/// returns:
/// An instance of <code>OfflineQRCodeSDKPinWithBiometrics</code>.
+ (OfflineQRCodeSDKPinWithBiometrics * _Nonnull)withQrCode:(NSString * _Nonnull)qrCode promptReason:(NSString * _Nonnull)promptReason SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents default parameters for processing an offline QR code.
SWIFT_CLASS("_TtC10FuturaeKit20OfflineQRCodeDefault")
@interface OfflineQRCodeDefault : OfflineQRCodeParameters
/// Initializes a new instance with the provided QR code.
/// \param qrCode The QR code string to be processed.
///
- (nonnull instancetype)initWithQrCode:(NSString * _Nonnull)qrCode OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents offline QR code parameters that include an SDK-specific pin.
SWIFT_CLASS("_TtC10FuturaeKit19OfflineQRCodeSDKPin")
@interface OfflineQRCodeSDKPin : OfflineQRCodeParameters
/// Initializes a new instance with the provided QR code and SDK-specific pin.
/// \param qrCode The QR code string to be processed.
///
/// \param sdkPin The SDK-specific pin for processing the QR code.
///
- (nonnull instancetype)initWithQrCode:(NSString * _Nonnull)qrCode sdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents offline QR code parameters that include a prompt message for biometric authentication.
SWIFT_CLASS("_TtC10FuturaeKit33OfflineQRCodeSDKPinWithBiometrics")
@interface OfflineQRCodeSDKPinWithBiometrics : OfflineQRCodeParameters
/// Initializes a new instance with the provided QR code and prompt message for biometric authentication.
/// \param qrCode The QR code string to be processed.
///
/// \param promptReason A message or reason for prompting the user’s biometric authentication.
///
- (nonnull instancetype)initWithQrCode:(NSString * _Nonnull)qrCode promptReason:(NSString * _Nonnull)promptReason OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for rejecting a push notification based authentication request.
SWIFT_CLASS("_TtC10FuturaeKit14RejectAuthPush")
@interface RejectAuthPush : AuthReplyParameters
/// Initializes a new instance of <code>RejectAuthPush</code>.
/// \param sessionId The session identifier for the authentication request.
///
/// \param userId The user identifier.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud, defaulting to false.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSString * _Nonnull)sessionId userId:(NSString * _Nonnull)userId isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for rejecting an authentication request via QR code.
SWIFT_CLASS("_TtC10FuturaeKit16RejectAuthQRCode")
@interface RejectAuthQRCode : AuthReplyParameters
/// Initializes a new instance of <code>RejectAuthQRCode</code>.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSString * _Nonnull)qrCode isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for rejecting a usernameless authentication request.
SWIFT_CLASS("_TtC10FuturaeKit22RejectAuthUsernameless")
@interface RejectAuthUsernameless : AuthReplyParameters
/// Initializes a new instance of <code>RejectAuthUsernameless</code>.
/// \param qrCode The QR code string associated with the authentication request.
///
/// \param userId The user identifier.
///
/// \param isFraud A Boolean value indicating whether the rejection is due to fraud, defaulting to false.
///
/// \param extraInfo Additional information as an array of <code>FTRExtraInfo</code>, optional.
///
- (nonnull instancetype)init:(NSString * _Nonnull)qrCode userId:(NSString * _Nonnull)userId isFraud:(BOOL)isFraud extraInfo:(NSArray<FTRExtraInfo *> * _Nullable)extraInfo OBJC_DESIGNATED_INITIALIZER;
@end

/// The base error class for the Futurae SDK.
/// This class serves as the root for all SDK error types. It conforms to both the
/// <code>LocalizedError</code> and <code>CustomNSError</code> protocols, allowing it to provide localized descriptions,
/// recovery suggestions, and other error information that can be presented to the user or used for debugging.
/// All SDK-specific errors derive from this class and inherit its properties.
SWIFT_CLASS("_TtC10FuturaeKit12SDKBaseError")
@interface SDKBaseError : NSObject
/// A description of the error.
/// This property combines the primary error message with the localized description of any underlying error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// A recovery suggestion for the error.
@property (nonatomic, readonly, copy) NSString * _Nullable recoverySuggestion;
/// An explanation of the reason for the failure.
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
/// The error code for the error.
@property (nonatomic, readonly) NSInteger errorCode;
/// A dictionary containing additional information about the error.
/// The dictionary includes the localized description, failure reason, recovery suggestion,
/// and additional keys if the error is a <code>SDKApiError</code> (such as the number of PIN attempts left)
/// or if an HTTP response code or underlying error is available.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull errorUserInfo;
/// The SDK-specific error domain for the error..
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The primary error message describing what went wrong.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The integer error code.
@property (nonatomic, readonly) NSInteger code;
/// The HTTP status code associated with the error, if applicable.
@property (nonatomic, readonly, strong) NSNumber * _Nullable httpCode;
/// A hint that may help the developer or user recover from the error.
@property (nonatomic, readonly, copy) NSString * _Nullable recoveryHint;
/// An additional hint that provides further context about why the error occurred.
@property (nonatomic, readonly, copy) NSString * _Nullable failureHint;
/// An optional underlying error that may have caused this error.
@property (nonatomic) NSError * _Nullable underlyingError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SDKAccountsErrorCode : NSInteger;
/// Represents an error that occurs during account management operations within the Futurae SDK.
/// This error is thrown when issues related to retrieving, updating, or validating accounts are encountered,
/// such as when an account is not found, the accounts list is empty, or required account-specific data (device ID or token) is missing.
SWIFT_CLASS("_TtC10FuturaeKit16SDKAccountsError")
@interface SDKAccountsError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific account error code that indicates the reason for the failure.
@property (nonatomic, readonly) enum SDKAccountsErrorCode sdkCode;
@end

/// Enumerates the various error codes related to account operations within the Futurae SDK.
/// Each case corresponds to a specific condition encountered during account management.
typedef SWIFT_ENUM(NSInteger, SDKAccountsErrorCode, open) {
/// An unknown account error occurred.
  SDKAccountsErrorCodeUnknown = 1,
/// The specified account was not found.
  SDKAccountsErrorCodeNotFound = 2,
/// The accounts list is empty.
  SDKAccountsErrorCodeAccountsEmpty = 3,
/// Failed to retrieve the accounts list.
  SDKAccountsErrorCodeAccountsRetrieveFail = 5,
/// The device ID associated with the account is missing.
  SDKAccountsErrorCodeAccountDeviceIdMissing = 6,
/// The device token associated with the account is missing.
  SDKAccountsErrorCodeAccountDeviceTokenMissing = 7,
};

enum SDKApiErrorCode : NSInteger;
@class NSHTTPURLResponse;
/// An error type representing API errors returned by the Futurae backend,
/// mapped into a corresponding SDK error code. This error encapsulates both
/// the HTTP response details and the backend error (if available).
SWIFT_CLASS("_TtC10FuturaeKit11SDKApiError")
@interface SDKApiError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The SDK-specific API error code indicating the specific type of API error.
@property (nonatomic, readonly) enum SDKApiErrorCode sdkCode;
/// The original API error returned from the backend (if any).
@property (nonatomic, readonly, strong) ApiError * _Nullable apiError;
/// The HTTP response received from the API call.
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nonnull httpResponse;
/// The raw response data returned by the API, if available.
@property (nonatomic, readonly, copy) NSData * _Nullable responseData;
/// A UTF-8 decoded string representation of the response data (if available).
@property (nonatomic, readonly, copy) NSString * _Nullable responseString;
/// If the error relates to PIN verification, this indicates the number of PIN attempts left.
/// It is exposed as an NSNumber for Objective-C compatibility.
@property (nonatomic, readonly, strong) NSNumber * _Nullable pinAttemptsLeft;
@end

/// Enumerates the various API error codes that the Futurae backend may return,
/// and which are mapped into corresponding SDK error codes.
typedef SWIFT_ENUM(NSInteger, SDKApiErrorCode, open) {
/// An unhandled error occurred.
  SDKApiErrorCodeUnhandledError = 0,
/// The provided PIN is incorrect.
  SDKApiErrorCodeIncorrectPin = 1,
/// The provided PIN is incorrect and the device is archived.
  SDKApiErrorCodeIncorrectPinArchivedDevice = 2,
/// A PIN was provided when none was needed.
  SDKApiErrorCodePinNotNeeded = 3,
/// The PIN is missing from the request.
  SDKApiErrorCodeMissingPin = 4,
/// The API call returned no content.
  SDKApiErrorCodeNoContent = 5,
/// The content was not modified.
  SDKApiErrorCodeContentNotModified = 6,
/// The API call was malformed (bad request).
  SDKApiErrorCodeBadRequest = 7,
/// The operation is forbidden.
  SDKApiErrorCodeOperationForbidden = 8,
/// The API route was not found.
  SDKApiErrorCodeRouteNotFound = 9,
/// A precondition failed for the API call.
  SDKApiErrorCodePreconditionFailed = 10,
/// Authorization failed for the API call.
  SDKApiErrorCodeAuthorizationFailed = 11,
/// An internal server exception occurred.
  SDKApiErrorCodeInternalServerException = 12,
/// The device has been archived.
  SDKApiErrorCodeDeviceArchived = 13,
/// Adaptive migration failed.
  SDKApiErrorCodeAdaptiveMigrationFailed = 14,
/// The binding token check failed.
  SDKApiErrorCodeBindingTokenCheckFailed = 15,
/// The multi-number choice provided was incorrect.
  SDKApiErrorCodeWrongMultiNumberChoice = 16,
};

enum SDKAppAttestErrorCode : NSInteger;
/// Represents an error related to App Attest operations within the Futurae SDK.
/// This error is raised when there are issues during the App Attest flow, such as when the device
/// does not support App Attest, or when generating the key ID, attestation, or assertion objects fails.
SWIFT_CLASS("_TtC10FuturaeKit17SDKAppAttestError")
@interface SDKAppAttestError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific App Attest error code that indicates the type of failure.
@property (nonatomic, readonly) enum SDKAppAttestErrorCode sdkCode;
@end

/// Enumerates the various App Attest error codes that can be returned by the Futurae SDK.
/// Each error code represents a specific failure within the App Attest process, such as lack of support,
/// key generation failures, or failure to verify app integrity.
typedef SWIFT_ENUM(NSInteger, SDKAppAttestErrorCode, open) {
/// An unknown App Attest error occurred.
  SDKAppAttestErrorCodeUnknown = 1,
/// The App Attest service is not supported on this device.
/// (App Attest is only available on devices running iOS 14 or later.)
  SDKAppAttestErrorCodeServiceNotSupported = 2,
/// Failed to generate the key ID for App Attest.
  SDKAppAttestErrorCodeKeyIdFailure = 3,
/// The key ID was not found in the user defaults.
  SDKAppAttestErrorCodeKeyIdDefaultsNotFound = 4,
/// Failed to generate the attestation object.
  SDKAppAttestErrorCodeAttestationFailure = 5,
/// Failed to generate the assertion object.
  SDKAppAttestErrorCodeAssertionFailure = 6,
/// Failed to retrieve the server challenge.
  SDKAppAttestErrorCodeRetrieveChallengeFailure = 7,
/// The app integrity could not be verified.
  SDKAppAttestErrorCodeAppIntegrityNotVerified = 8,
};

@interface SDKBaseError (SWIFT_EXTENSION(FuturaeKit))
/// A textual description of the error.
/// This property returns a string containing the error domain, code, and message.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum SDKErrorType : NSInteger;
@interface SDKBaseError (SWIFT_EXTENSION(FuturaeKit))
@property (nonatomic, readonly) enum SDKErrorType errorType;
@end

enum SDKBiometricsStateErrorCode : NSInteger;
/// Represents an error related to the state of biometrics within the Futurae SDK.
/// This error is thrown when biometric data has changed on the device,
/// invalidating previously generated biometric credentials.
SWIFT_CLASS("_TtC10FuturaeKit23SDKBiometricsStateError")
@interface SDKBiometricsStateError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific biometrics state error code associated with this error.
@property (nonatomic, readonly) enum SDKBiometricsStateErrorCode sdkCode;
@end

/// Enumerates the error codes related to biometric state issues in the Futurae SDK.
/// These error codes indicate that the device’s biometric data has changed, potentially invalidating
/// the existing credentials or PIN-based unlocking configuration.
typedef SWIFT_ENUM(NSInteger, SDKBiometricsStateErrorCode, open) {
/// An unknown biometrics state error occurred.
  SDKBiometricsStateErrorCodeUnknown = 1,
/// The device’s biometric data has changed, invalidating the current biometric credentials.
/// (e.g., the user has added or removed biometric entries.)
  SDKBiometricsStateErrorCodeBiometricsChanged = 2,
/// The device’s biometric data has changed specifically for the PIN configuration,
/// rendering the biometrics used to retrieve the PIN invalid.
  SDKBiometricsStateErrorCodeBiometricsChangedPin = 3,
};

enum SDKConnectionErrorCode : NSInteger;
@class NSURLResponse;
/// Represents a connection-related error in the Futurae SDK.
/// This error is generated when issues occur during network communication,
/// such as timeouts, unreachable hosts, or certificate pinning failures.
SWIFT_CLASS("_TtC10FuturaeKit18SDKConnectionError")
@interface SDKConnectionError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The SDK-specific connection error code indicating the type of connection error.
@property (nonatomic, readonly) enum SDKConnectionErrorCode sdkCode;
/// The URL response associated with the connection error (if any).
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable urlResponse;
@end

/// Enumerates the various connection error codes for the Futurae SDK.
/// Each case corresponds to a specific network or connection issue encountered by the SDK.
typedef SWIFT_ENUM(NSInteger, SDKConnectionErrorCode, open) {
/// The operation was cancelled.
  SDKConnectionErrorCodeCancelled = 0,
/// The URL provided is malformed.
  SDKConnectionErrorCodeBadURL = 1,
/// The request timed out.
  SDKConnectionErrorCodeTimedOut = 2,
/// The URL type is unsupported.
  SDKConnectionErrorCodeUnsupportedURL = 3,
/// The specified host could not be found.
  SDKConnectionErrorCodeCannotFindHost = 4,
/// Unable to connect to the specified host.
  SDKConnectionErrorCodeCannotConnectToHost = 5,
/// The network connection was lost during the request.
  SDKConnectionErrorCodeNetworkConnectionLost = 6,
/// The device is not connected to the internet.
  SDKConnectionErrorCodeNotConnectedToInternet = 7,
/// Data usage is restricted (e.g., cellular data is disabled).
  SDKConnectionErrorCodeDataNotAllowed = 8,
/// Failed to establish a secure connection.
  SDKConnectionErrorCodeSecureConnectionFailed = 9,
/// A generic error when none of the other cases match.
  SDKConnectionErrorCodeOther = 10,
/// Certificate pinning failed.
  SDKConnectionErrorCodeCertPinningFail = 11,
};

enum SDKCryptoErrorCode : NSInteger;
/// Represents an error that occurs during cryptographic operations in the Futurae SDK.
/// Such operations include key creation, deletion, encryption, decryption, and digital signing.
/// This error type encapsulates a specific cryptographic error code along with its associated
/// message.
SWIFT_CLASS("_TtC10FuturaeKit14SDKCryptoError")
@interface SDKCryptoError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific cryptographic error code associated with this error.
@property (nonatomic, readonly) enum SDKCryptoErrorCode sdkCode;
@end

/// Enumerates the various cryptographic error codes that can be returned by the Futurae SDK.
/// Each case corresponds to a specific failure during cryptographic operations, such as key handling,
/// encryption/decryption, or signing.
typedef SWIFT_ENUM(NSInteger, SDKCryptoErrorCode, open) {
/// An unknown cryptographic error occurred.
  SDKCryptoErrorCodeUnknown = 1,
/// Failed to delete the symmetric crypto key.
  SDKCryptoErrorCodeDeleteSymmetricKeyFail = 2,
/// Failed to retrieve the symmetric crypto key.
  SDKCryptoErrorCodeRetrieveSymmetricKeyFail = 3,
/// Failed to create a symmetric crypto key.
  SDKCryptoErrorCodeCreateSymmetricKeyFail = 4,
/// Failed to delete the asymmetric crypto key.
  SDKCryptoErrorCodeDeleteAsymmetricKeysFail = 5,
/// Failed to retrieve the public key from an asymmetric key pair.
  SDKCryptoErrorCodeRetrieveAsymmetricPublicKeyFail = 6,
/// Failed to retrieve the private key from an asymmetric key pair.
  SDKCryptoErrorCodeRetrieveAsymmetricPrivateKeyFail = 7,
/// Failed to create an asymmetric key pair.
  SDKCryptoErrorCodeCreateAsymmetricKeysFail = 8,
/// Failed to decrypt an AES256 CTR encoded string using the symmetric key.
  SDKCryptoErrorCodeDecryptAES256CTREncodedStringFail = 9,
/// Failed to encrypt data using AES256 CTR mode with the symmetric key.
  SDKCryptoErrorCodeEncryptAES256CTRFail = 10,
/// Failed to sign data using an asymmetric key with ECDSA.
  SDKCryptoErrorCodeSignECDSAFail = 11,
/// Failed to retrieve a keychain item.
  SDKCryptoErrorCodeItemRetrieveFail = 12,
/// The requested keychain item is not present.
  SDKCryptoErrorCodeItemNotPresent = 13,
};

enum SDKDatabaseErrorCode : NSInteger;
/// Represents an error that occurs during database operations in the Futurae SDK.
/// These operations include initializing the database, preparing and executing queries,
/// as well as inserting, updating, deleting, and fetching data.
/// This error type encapsulates a specific database error code along with any underlying error information.
SWIFT_CLASS("_TtC10FuturaeKit16SDKDatabaseError")
@interface SDKDatabaseError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific database error code associated with this error.
@property (nonatomic, readonly) enum SDKDatabaseErrorCode sdkCode;
@end

/// Enumerates the various error codes that can occur during database operations within the Futurae SDK.
/// Each case corresponds to a specific failure condition (e.g., initialization, query execution, or data manipulation failures).
typedef SWIFT_ENUM(NSInteger, SDKDatabaseErrorCode, open) {
/// An unknown database error occurred.
  SDKDatabaseErrorCodeUnknown = 1,
/// The list of columns to update is empty.
  SDKDatabaseErrorCodeColumnsToUpdateEmpty = 2,
/// The specified column was not found in the database.
  SDKDatabaseErrorCodeColumnNotFound = 3,
/// Failed to initialize the database.
  SDKDatabaseErrorCodeInitFail = 4,
/// Failed to fetch query results from the database.
  SDKDatabaseErrorCodeFetchFail = 5,
/// Failed to iterate through query results.
  SDKDatabaseErrorCodeIteratorFail = 6,
/// Failed to run the query.
  SDKDatabaseErrorCodeRunFail = 7,
/// Failed to execute the query.
  SDKDatabaseErrorCodeExecuteFail = 8,
/// Failed to prepare the query.
  SDKDatabaseErrorCodePrepareFail = 9,
/// Failed to insert data into the database.
  SDKDatabaseErrorCodeInsertFail = 10,
/// Failed to delete data from the database.
  SDKDatabaseErrorCodeDeleteFail = 11,
/// Failed to update data in the database.
  SDKDatabaseErrorCodeUpdateFail = 12,
};

enum SDKErrorCode : NSInteger;
/// Represents an error originating from the Futurae SDK.
/// This class encapsulates an SDK-specific error code and provides
/// an error message, a numeric code, and (optionally) recovery and failure hints.
SWIFT_CLASS("_TtC10FuturaeKit8SDKError")
@interface SDKError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific SDK error code associated with this error.
@property (nonatomic, readonly) enum SDKErrorCode sdkCode;
@end

/// Enumerates the various error codes that can be returned by the Futurae SDK.
typedef SWIFT_ENUM(NSInteger, SDKErrorCode, open) {
/// An unknown error occurred.
  SDKErrorCodeUnknown = 1,
/// Migration information is missing.
  SDKErrorCodeMigrationInfoMissing = 2,
/// The device token could not be retrieved.
  SDKErrorCodeDeviceTokenMissing = 3,
/// The device UDID could not be retrieved.
  SDKErrorCodeDeviceUDIDMissing = 4,
/// Failed to decode an object using NSKeyedUnarchiver.
  SDKErrorCodeDecodeObjectFailed = 5,
/// The scanned QR-code is invalid.
  SDKErrorCodeInvalidQRCode = 6,
/// The SDK configuration is invalid.
  SDKErrorCodeInvalidConfiguration = 7,
/// Simultaneous enroll calls are not allowed.
  SDKErrorCodeMultipleEnrollDisallowed = 8,
/// The specified base URL is not allowed.
  SDKErrorCodeBaseURLDisallowed = 9,
/// Multiple PIN enrollments are not allowed.
  SDKErrorCodeMultiplePinEnrollDisallowed = 10,
/// The enrollment QR-code scanned is invalid.
  SDKErrorCodeInvalidQRCodeEnroll = 11,
/// The account is already active on this device.
  SDKErrorCodeAccountActive = 12,
/// Failed to generate a TOTP.
  SDKErrorCodeGenerateTotpFail = 13,
/// The notification payload is invalid.
  SDKErrorCodeNotificationInvalid = 14,
/// Failed to decrypt the extra info data.
  SDKErrorCodeDecryptExtraFail = 15,
/// The number of digits defined for the OTP exceeds the allowed maximum.
  SDKErrorCodeOCRANumberOfDigitsTooLargeError = 16,
/// Failed to map the API response to the SDK object model.
  SDKErrorCodeDecodeAPIResponseFail = 17,
/// Failed to decrypt the account data.
  SDKErrorCodeDecryptAccountFail = 18,
/// The enrollment URL provided is not valid.
  SDKErrorCodeEnrollUrlInvalid = 19,
/// Adaptive functionality is not enabled.
  SDKErrorCodeAdaptiveNotEnabled = 20,
/// An initial enrollment is required before proceeding.
  SDKErrorCodeInitialEnrollmentRequired = 21,
/// The configuration’s <code>invalidatedByBiometricsChange</code> flag has changed in a way that invalidates the current configuration.
  SDKErrorCodeConfigChangedInvalidatedByBiometrics = 22,
/// The lock configuration type has changed.
  SDKErrorCodeConfigChangedLockType = 23,
/// The app group configuration has changed.
  SDKErrorCodeConfigChangedAppGroup = 24,
/// The keychain access group configuration has changed.
  SDKErrorCodeConfigChangedKeychainAccessGroup = 25,
/// The keychain items’ accessibility configuration has changed.
  SDKErrorCodeConfigChangedKeychainItemsAccessibility = 26,
};

SWIFT_CLASS("_TtC10FuturaeKit14SDKErrorDomain")
@interface SDKErrorDomain : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdk;)
+ (NSString * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull api;)
+ (NSString * _Nonnull)api SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connection;)
+ (NSString * _Nonnull)connection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull system;)
+ (NSString * _Nonnull)system SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkLock;)
+ (NSString * _Nonnull)sdkLock SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkBiometricsState;)
+ (NSString * _Nonnull)sdkBiometricsState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkPin;)
+ (NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkCrypto;)
+ (NSString * _Nonnull)sdkCrypto SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkAppAttest;)
+ (NSString * _Nonnull)sdkAppAttest SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkMigration;)
+ (NSString * _Nonnull)sdkMigration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkURL;)
+ (NSString * _Nonnull)sdkURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkSwitchLock;)
+ (NSString * _Nonnull)sdkSwitchLock SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDatabase;)
+ (NSString * _Nonnull)sdkDatabase SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkAccounts;)
+ (NSString * _Nonnull)sdkAccounts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SDKErrorType, open) {
  SDKErrorTypeBase = 0,
  SDKErrorTypeSdk = 1,
  SDKErrorTypeSdkLock = 2,
  SDKErrorTypeSdkBiometricsState = 3,
  SDKErrorTypeSdkPin = 4,
  SDKErrorTypeSdkCrypto = 5,
  SDKErrorTypeSdkAppAttest = 6,
  SDKErrorTypeSdkMigration = 7,
  SDKErrorTypeSdkURL = 8,
  SDKErrorTypeSdkSwitchLock = 9,
  SDKErrorTypeSdkDatabase = 10,
  SDKErrorTypeSdkAccounts = 11,
  SDKErrorTypeApi = 12,
  SDKErrorTypeConnection = 13,
  SDKErrorTypeSystem = 14,
};

enum SDKLockErrorCode : NSInteger;
/// An error type representing lock-related errors in the Futurae SDK.
/// These errors are thrown when operations that require the SDK to be unlocked fail,
/// or when there are issues with the SDK’s locking mechanism (e.g., no lock enabled,
/// PIN-related issues, etc.).
SWIFT_CLASS("_TtC10FuturaeKit12SDKLockError")
@interface SDKLockError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific lock error code associated with this error.
@property (nonatomic, readonly) enum SDKLockErrorCode sdkCode;
@end

/// Enumerates the various lock error codes that can occur in the Futurae SDK.
/// Each case represents a specific condition related to the SDK’s lock and unlock functionality,
/// and provides a descriptive message along.
typedef SWIFT_ENUM(NSInteger, SDKLockErrorCode, open) {
/// An unknown lock error occurred.
  SDKLockErrorCodeUnknown = 1,
/// The lock configuration type is <code>NONE</code>; no locking mechanism is enabled.
  SDKLockErrorCodeLockNotEnabled = 2,
/// The SDK is currently locked.
  SDKLockErrorCodeLocked = 3,
/// Failed to generate access control flags for biometric-based keys.
  SDKLockErrorCodeAccessControlConfigFail = 4,
/// No locking mechanism is enabled to support access control flags for biometric-based keys.
  SDKLockErrorCodeAccessControlLockFail = 5,
/// Authentication evaluation failed (e.g., due to failed biometric or passcode verification).
  SDKLockErrorCodeAccessControlEvaluateFail = 6,
/// The unlocking mechanism is not available.
  SDKLockErrorCodeUnlockNotAvailable = 7,
/// Biometrics unlocking is not activated for the current PIN configuration.
  SDKLockErrorCodeBiometricsNotAvailableForPIN = 8,
/// The provided PIN is empty.
  SDKLockErrorCodeSdkPinEmpty = 9,
/// The operation is available only for PIN configuration, but the PIN mechanism is not available.
  SDKLockErrorCodeSdkPinNotAvailable = 10,
/// No enrollment with a PIN has been performed; enrollment with PIN is required.
  SDKLockErrorCodeSdkPinEnrollRequired = 11,
/// The specified unlock duration is invalid.
  SDKLockErrorCodeInvalidUnlockDuration = 12,
};

/// Enumerates the possible lock statuses of the SDK.
typedef SWIFT_ENUM(NSInteger, SDKLockStatus, open) {
  SDKLockStatusLocked = 0,
  SDKLockStatusUnlocked = 1,
};

enum SDKMigrationErrorCode : NSInteger;
/// Represents an error that occurs during the accounts migration process in the Futurae SDK.
/// This error is raised when the SDK detects that the conditions for automatic account migration
/// are not met (e.g., missing migration information, conflicting enrolled accounts, etc.).
SWIFT_CLASS("_TtC10FuturaeKit17SDKMigrationError")
@interface SDKMigrationError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific migration error code that describes the reason for the migration failure.
@property (nonatomic, readonly) enum SDKMigrationErrorCode sdkCode;
@end

/// Enumerates the various error codes related to accounts migration within the Futurae SDK.
/// Each case indicates a specific reason why accounts migration might fail.
typedef SWIFT_ENUM(NSInteger, SDKMigrationErrorCode, open) {
/// An unknown migration error occurred.
  SDKMigrationErrorCodeUnknown = 1,
/// No accounts migration information was found on the device.
  SDKMigrationErrorCodeMigrationInfoMissing = 2,
/// There is at least one account currently enrolled on the device, so migration is not possible.
  SDKMigrationErrorCodeAccountsExistError = 3,
/// An account was previously enrolled on the device, which conflicts with the migration process.
  SDKMigrationErrorCodeAccountPreviouslyEnrolledError = 4,
/// A valid PIN is required for migration, but none was provided.
  SDKMigrationErrorCodePinRequired = 5,
/// The device UDID could not be found, which is necessary for migration.
  SDKMigrationErrorCodeNoDeviceUDID = 6,
/// A migration token, required for authentication during migration, was not found.
  SDKMigrationErrorCodeNoMigrationToken = 7,
};

/// <code>SDKPinConfiguration</code> class represents the configuration settings for SDK Pin behaviour.
SWIFT_CLASS("_TtC10FuturaeKit19SDKPinConfiguration")
@interface SDKPinConfiguration : NSObject
/// A Boolean indicating whether changing SDK Pin is possible when SDK is unlocked with biometrics. False by default.
@property (nonatomic, readonly) BOOL allowPinChangeWithBiometricUnlock;
/// A Boolean indicating whether biometrics are deactivated after changing SDK Pin. True by default.
@property (nonatomic, readonly) BOOL deactivateBiometricsAfterPinChange;
/// \param allowPinChangeWithBiometricUnlock Indicates whether changing SDK Pin is possible when SDK is unlocked with biometrics. False by default.
///
/// \param deactivateBiometricsAfterPinChange Indicates whether biometrics are deactivated after changing SDK Pin. True by default.
///
- (nonnull instancetype)initWithAllowPinChangeWithBiometricUnlock:(BOOL)allowPinChangeWithBiometricUnlock deactivateBiometricsAfterPinChange:(BOOL)deactivateBiometricsAfterPinChange OBJC_DESIGNATED_INITIALIZER;
+ (SDKPinConfiguration * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SDKPinErrorCode : NSInteger;
/// Represents an error related to PIN operations within the Futurae SDK.
/// This error is thrown when an operation involving the SDK PIN fails, such as when the PIN is not available,
/// secure storage operations fail, or when required PIN-related operations are attempted with empty or missing PINs.
SWIFT_CLASS("_TtC10FuturaeKit11SDKPinError")
@interface SDKPinError : SDKBaseError
/// The error domain for PIN-related errors.
/// This value identifies that the error originates from the SDK PIN subsystem.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific PIN error code indicating the type of failure.
@property (nonatomic, readonly) enum SDKPinErrorCode sdkCode;
@end

/// Enumerates the various PIN error codes that can occur in the Futurae SDK.
/// Each case corresponds to a specific condition related to PIN management, such as unavailability,
/// secure storage failures, or empty PIN values.
typedef SWIFT_ENUM(NSInteger, SDKPinErrorCode, open) {
/// An unknown PIN error occurred.
  SDKPinErrorCodeUnknown = 1,
/// The SDK PIN is not available.
  SDKPinErrorCodePinNotAvailable = 2,
/// Failed to securely set the SDK PIN (e.g., activating biometrics for PIN storage failed).
  SDKPinErrorCodeSetPinSecureFail = 3,
/// The SDK PIN is not available from secure storage due to missing biometrics activation.
  SDKPinErrorCodePinNotAvailableSecure = 4,
/// Failed to remove the SDK PIN from secure storage.
  SDKPinErrorCodeRemovePinSecureFail = 5,
/// Failed to retrieve the SDK PIN from secure storage.
  SDKPinErrorCodeRetrievePinSecureFail = 6,
/// Biometrics can be used only when using PIN configuration.
  SDKPinErrorCodeBiometricsPinOnly = 7,
/// The provided PIN is empty.
  SDKPinErrorCodePinIsEmpty = 8,
/// The new PIN provided for a change operation is empty.
  SDKPinErrorCodeNewPinIsEmpty = 9,
/// The requested operation is available only for PIN configuration.
  SDKPinErrorCodePinOnlyOperation = 10,
/// The SDK requires that the user enroll with a PIN first.
  SDKPinErrorCodeEnrollPinFirst = 11,
/// The SDK must be unlocked with PIN before proceeding (biometrics alone are not accepted for PIN change).
  SDKPinErrorCodePinUnlockFirst = 12,
};

SWIFT_CLASS("_TtC10FuturaeKit9SDKReport")
@interface SDKReport : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull report;
@property (nonatomic, readonly) NSInteger errors;
@property (nonatomic, readonly, copy) NSString * _Nonnull logs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>SDKState</code> class represents the current state of the SDK, including lock status and configuration.
SWIFT_CLASS("_TtC10FuturaeKit8SDKState")
@interface SDKState : NSObject
/// The current lock status of the SDK.
@property (nonatomic, readonly) enum SDKLockStatus lockStatus;
/// The remaining duration for which the SDK will stay unlocked.
@property (nonatomic, readonly) NSTimeInterval unlockedRemainingDuration;
/// An error object representing any error state within the SDK.
@property (nonatomic, readonly) NSError * _Nullable error;
/// Check if the device’s biometrics settings have been changed, which renders the SDK biometrics invalid.
@property (nonatomic, readonly) BOOL haveBiometricsChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumerates the possible lock statuses of the SDK.
typedef SWIFT_ENUM(NSInteger, SDKStatus, open) {
  SDKStatusNotLaunched = 0,
  SDKStatusLaunched = 1,
  SDKStatusLaunching = 2,
  SDKStatusNeedsReset = 3,
};

enum SDKSwitchLockErrorCode : NSInteger;
/// Represents an error that occurs when attempting to switch the SDK’s lock configuration.
/// This error is thrown when the actual lock configuration does not match the expected configuration
/// during a switch operation.
SWIFT_CLASS("_TtC10FuturaeKit18SDKSwitchLockError")
@interface SDKSwitchLockError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific switch lock error code indicating the type of failure encountered during the lock switch.
@property (nonatomic, readonly) enum SDKSwitchLockErrorCode sdkCode;
@end

/// Enumerates the possible error codes for failures occurring when switching the SDK lock configuration.
/// Each case indicates the expected lock configuration type that was not met.
typedef SWIFT_ENUM(NSInteger, SDKSwitchLockErrorCode, open) {
/// An unknown switch lock error occurred.
  SDKSwitchLockErrorCodeUnknown = 1,
/// The operation expected the lock configuration to be “None” (i.e. no lock enabled),
/// but the current configuration did not match.
  SDKSwitchLockErrorCodeExpectedNone = 2,
/// The operation expected the lock configuration to be “Biometrics Only”,
/// but the current configuration did not match.
  SDKSwitchLockErrorCodeExpectedBiometricsOnly = 3,
/// The operation expected the lock configuration to be “Biometrics or Passcode”,
/// but the current configuration did not match.
  SDKSwitchLockErrorCodeExpectedBiometricsOrPasscode = 4,
/// The operation expected the lock configuration to be “SDK PIN with Biometrics Optional”,
/// but the current configuration did not match.
  SDKSwitchLockErrorCodeExpectedSDKPin = 5,
};

enum SDKSystemErrorCode : NSInteger;
/// Represents a system-level error within the Futurae SDK.
/// <code>SDKSystemError</code> is used for errors that are related to system-level issues within the SDK,
/// such as unexpected failures in underlying system calls or other low-level issues.
SWIFT_CLASS("_TtC10FuturaeKit14SDKSystemError")
@interface SDKSystemError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific system error code associated with this error.
@property (nonatomic, readonly) enum SDKSystemErrorCode sdkCode;
@end

/// Enumerates the system error codes for the Futurae SDK.
/// Currently, the only defined system error is <code>unknown</code>, which indicates that an unexpected system error has occurred.
/// This enum can be extended in the future as more specific system-level error cases are identified.
typedef SWIFT_ENUM(NSInteger, SDKSystemErrorCode, open) {
/// An unknown system error occurred.
  SDKSystemErrorCodeUnknown = 1,
};

enum SDKURLErrorCode : NSInteger;
/// Represents an error related to URL handling in the Futurae SDK.
/// This error is raised when URL-based operations fail, such as when an activation code or session token is missing,
/// the URL type is unrecognized, or the URL link is invalid.
SWIFT_CLASS("_TtC10FuturaeKit11SDKURLError")
@interface SDKURLError : SDKBaseError
/// The error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkDomainError;)
+ (NSString * _Nonnull)sdkDomainError SWIFT_WARN_UNUSED_RESULT;
/// The error domain.
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The specific URL error code associated with this error.
@property (nonatomic, readonly) enum SDKURLErrorCode sdkCode;
@end

/// Enumerates the various URL error codes that can be returned by the Futurae SDK.
/// Each case corresponds to a specific condition related to URL operations, such as missing or invalid activation codes,
/// unrecognized URL types, or malformed URL links.
typedef SWIFT_ENUM(NSInteger, SDKURLErrorCode, open) {
/// An unknown URL error occurred.
  SDKURLErrorCodeUnknown = 1,
/// No activation code was found in the URL.
  SDKURLErrorCodeActivationCodeNotFound = 2,
/// The activation code provided is invalid.
  SDKURLErrorCodeInvalidActivationCode = 3,
/// No session token was found in the URL.
  SDKURLErrorCodeInvalidSessionToken = 4,
/// The activation code has an invalid base64 encoding.
  SDKURLErrorCodeInvalidEncodingActivationCode = 5,
/// The URL type is unrecognized.
  SDKURLErrorCodeUnknownURLType = 6,
/// The URL link is invalid (malformed or not following the expected pattern).
  SDKURLErrorCodeInvalidUrlLink = 7,
};

@class SessionId;
@class SessionToken;
/// <code>SessionParameters</code> class encapsulates the parameters required for session-related operations.
SWIFT_CLASS("_TtC10FuturaeKit17SessionParameters")
@interface SessionParameters : NSObject
/// The user identifier associated with the session.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The session-specific value, which could be a session ID or token.
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Creates session parameters with a specific session ID.
/// \param id The session ID.
///
/// \param userId The user identifier associated with the session.
///
///
/// returns:
/// An instance of <code>SessionId</code>.
+ (SessionId * _Nonnull)withId:(NSString * _Nonnull)id userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Creates session parameters with a specific session token.
/// \param token The session token.
///
/// \param userId The user identifier associated with the session.
///
///
/// returns:
/// An instance of <code>SessionToken</code>.
+ (SessionToken * _Nonnull)withToken:(NSString * _Nonnull)token userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>SessionId</code> class represents session parameters specifically for a session identified by an ID.
SWIFT_CLASS("_TtC10FuturaeKit9SessionId")
@interface SessionId : SessionParameters
/// Initializes a new instance of <code>SessionId</code> with the provided session ID and user identifier.
/// \param value The session ID.
///
/// \param userId The user identifier associated with the session.
///
- (nonnull instancetype)init:(NSString * _Nonnull)value userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
@end

/// <code>SessionToken</code> class represents session parameters specifically for a session identified by a token.
SWIFT_CLASS("_TtC10FuturaeKit12SessionToken")
@interface SessionToken : SessionParameters
/// Initializes a new instance of <code>SessionToken</code> with the provided session token and user identifier.
/// \param value The session token.
///
/// \param userId The user identifier associated with the session.
///
- (nonnull instancetype)init:(NSString * _Nonnull)value userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
@end

@class SwitchToLockNone;
@class SwitchToLockBiometrics;
@class SwitchToLockBiometricsOrPasscode;
@class SwitchToLockSDKPin;
/// <code>SwitchLockParameters</code> class encapsulates the parameters required for switching the locking mechanism.
SWIFT_CLASS("_TtC10FuturaeKit20SwitchLockParameters")
@interface SwitchLockParameters : NSObject
/// A message or reason prompting the user for the biometrics use.
@property (nonatomic, readonly, copy) NSString * _Nonnull promptReason;
/// The SDK pin used for the locking mechanism, if applicable.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkPin;
/// The new lock configuration to be applied.
@property (nonatomic, readonly, strong) LockConfiguration * _Nonnull lockConfiguration;
/// Creates parameters for switching to no lock.
/// \param newLockConfiguration The new lock configuration.
///
///
/// returns:
/// An instance of <code>SwitchToLockNone</code>.
+ (SwitchToLockNone * _Nonnull)withNewLockConfiguration:(LockConfiguration * _Nonnull)newLockConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Creates parameters for switching to biometric authentication.
/// \param biometricsPrompt A message or reason prompting the user for biometric authentication.
///
/// \param newLockConfiguration The new lock configuration.
///
///
/// returns:
/// An instance of <code>SwitchToLockBiometrics</code>.
+ (SwitchToLockBiometrics * _Nonnull)withBiometricsPrompt:(NSString * _Nonnull)biometricsPrompt newLockConfiguration:(LockConfiguration * _Nonnull)newLockConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Creates parameters for switching to biometric or passcode authentication.
/// \param biometricsOrPasscodePrompt A message or reason prompting the user for biometric or passcode authentication.
///
/// \param newLockConfiguration The new lock configuration.
///
///
/// returns:
/// An instance of <code>SwitchToLockBiometricsOrPasscode</code>.
+ (SwitchToLockBiometricsOrPasscode * _Nonnull)withBiometricsOrPasscodePrompt:(NSString * _Nonnull)biometricsOrPasscodePrompt newLockConfiguration:(LockConfiguration * _Nonnull)newLockConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Creates parameters for switching to SDK pin-based authentication.
/// \param sdkPin The SDK pin for authentication.
///
/// \param newLockConfiguration The new lock configuration.
///
///
/// returns:
/// An instance of <code>SwitchToLockSDKPin</code>.
+ (SwitchToLockSDKPin * _Nonnull)withSdkPin:(NSString * _Nonnull)sdkPin newLockConfiguration:(LockConfiguration * _Nonnull)newLockConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents parameters for switching to biometric-based locking mechanism.
SWIFT_CLASS("_TtC10FuturaeKit22SwitchToLockBiometrics")
@interface SwitchToLockBiometrics : SwitchLockParameters
/// Initializes a new instance with the provided prompt reason and lock configuration.
/// \param promptReason A message or reason prompting the user for biometric authentication.
///
/// \param lockConfiguration The lock configuration to switch to.
///
- (nonnull instancetype)initWithPromptReason:(NSString * _Nonnull)promptReason lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for switching to biometric or passcode-based locking mechanism.
SWIFT_CLASS("_TtC10FuturaeKit32SwitchToLockBiometricsOrPasscode")
@interface SwitchToLockBiometricsOrPasscode : SwitchLockParameters
/// Initializes a new instance with the provided prompt reason and lock configuration.
/// \param promptReason A message or reason prompting the user for biometric or passcode authentication.
///
/// \param lockConfiguration The lock configuration to switch to.
///
- (nonnull instancetype)initWithPromptReason:(NSString * _Nonnull)promptReason lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for switching to a state with no lock.
SWIFT_CLASS("_TtC10FuturaeKit16SwitchToLockNone")
@interface SwitchToLockNone : SwitchLockParameters
/// Initializes a new instance with the provided lock configuration.
/// \param lockConfiguration The lock configuration to switch to.
///
- (nonnull instancetype)initWithLockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for switching to SDK pin-based locking mechanism.
SWIFT_CLASS("_TtC10FuturaeKit18SwitchToLockSDKPin")
@interface SwitchToLockSDKPin : SwitchLockParameters
/// Initializes a new instance with the provided SDK pin and lock configuration.
/// \param sdkPin The SDK pin for the locking mechanism.
///
/// \param lockConfiguration The lock configuration to switch to.
///
- (nonnull instancetype)initWithSdkPin:(NSString * _Nonnull)sdkPin lockConfiguration:(LockConfiguration * _Nonnull)lockConfiguration OBJC_DESIGNATED_INITIALIZER;
@end

@class TOTPDefault;
@class TOTPSDKPin;
@class TOTPSDKPinWithBiometrics;
/// <code>TOTPParameters</code> class encapsulates the parameters required for TOTP (Time-based One-Time Password) operations.
SWIFT_CLASS("_TtC10FuturaeKit14TOTPParameters")
@interface TOTPParameters : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkPin;
@property (nonatomic, readonly, copy) NSString * _Nonnull promptReason;
/// Creates default TOTP parameters for a given user.
/// \param userId The user identifier for whom the TOTP is generated.
///
///
/// returns:
/// An instance of <code>TOTPDefault</code>.
+ (TOTPDefault * _Nonnull)withUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Creates TOTP parameters for a given user with an SDK-specific pin.
/// \param userId The user identifier for whom the TOTP is generated.
///
/// \param sdkPin The SDK-specific pin for TOTP generation.
///
///
/// returns:
/// An instance of <code>TOTPSDKPin</code>.
+ (TOTPSDKPin * _Nonnull)withUserId:(NSString * _Nonnull)userId sdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
/// Creates TOTP parameters for a given user with a prompt message for biometric authentication.
/// \param userId The user identifier for whom the TOTP is generated.
///
/// \param promptReason A message or reason for prompting the user’s biometric authentication.
///
///
/// returns:
/// An instance of <code>TOTPSDKPinWithBiometrics</code>.
+ (TOTPSDKPinWithBiometrics * _Nonnull)withUserId:(NSString * _Nonnull)userId promptReason:(NSString * _Nonnull)promptReason SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents default TOTP parameters for a user.
SWIFT_CLASS("_TtC10FuturaeKit11TOTPDefault")
@interface TOTPDefault : TOTPParameters
/// Initializes a new instance with the provided user identifier.
/// \param userId The user identifier for whom the TOTP is generated.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents TOTP parameters for a user with an SDK-specific pin.
SWIFT_CLASS("_TtC10FuturaeKit10TOTPSDKPin")
@interface TOTPSDKPin : TOTPParameters
/// Initializes a new instance with the provided user identifier and SDK-specific pin.
/// \param userId The user identifier for whom the TOTP is generated.
///
/// \param sdkPin The SDK-specific pin for TOTP generation.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId sdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents TOTP parameters for a user with a prompt message for biometric authentication.
SWIFT_CLASS("_TtC10FuturaeKit24TOTPSDKPinWithBiometrics")
@interface TOTPSDKPinWithBiometrics : TOTPParameters
/// Initializes a new instance with the provided user identifier and prompt message for biometric authentication.
/// \param userId The user identifier for whom the TOTP is generated.
///
/// \param promptReason A message or reason for prompting the user’s biometric authentication.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId promptReason:(NSString * _Nonnull)promptReason OBJC_DESIGNATED_INITIALIZER;
@end

@class UnlockBiometrics;
@class UnlockBiometricsOrPasscode;
@class UnlockSDKPin;
/// <code>UnlockParameters</code> class encapsulates the parameters required for different unlocking methods.
SWIFT_CLASS("_TtC10FuturaeKit16UnlockParameters")
@interface UnlockParameters : NSObject
/// The SDK pin, used if the unlocking method involves an SDK-specific pin.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkPin;
/// A message or reason used for biometrics or passcode prompts.
@property (nonatomic, readonly, copy) NSString * _Nonnull promptReason;
/// Creates parameters for unlocking using biometrics with a custom prompt message.
/// \param biometricsPrompt A custom message to display for biometric authentication.
///
///
/// returns:
/// An instance of <code>UnlockBiometrics</code>.
+ (UnlockBiometrics * _Nonnull)withBiometricsPrompt:(NSString * _Nonnull)biometricsPrompt SWIFT_WARN_UNUSED_RESULT;
/// Creates parameters for unlocking using either biometrics or passcode with a custom prompt message.
/// \param biometricsOrPasscodePrompt A custom message to display for biometric or passcode authentication.
///
///
/// returns:
/// An instance of <code>UnlockBiometricsOrPasscode</code>.
+ (UnlockBiometricsOrPasscode * _Nonnull)withBiometricsOrPasscodePrompt:(NSString * _Nonnull)biometricsOrPasscodePrompt SWIFT_WARN_UNUSED_RESULT;
/// Creates parameters for unlocking using an SDK-specific pin.
/// \param sdkPin The SDK-specific pin for unlocking.
///
///
/// returns:
/// An instance of <code>UnlockSDKPin</code>.
+ (UnlockSDKPin * _Nonnull)withSdkPin:(NSString * _Nonnull)sdkPin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents parameters for unlocking using biometrics with a custom prompt message.
SWIFT_CLASS("_TtC10FuturaeKit16UnlockBiometrics")
@interface UnlockBiometrics : UnlockParameters
/// Initializes a new instance with the provided prompt message for biometric authentication.
/// \param promptReason A custom message to display for biometric authentication.
///
- (nonnull instancetype)initWithPromptReason:(NSString * _Nonnull)promptReason OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents parameters for unlocking using either biometrics or passcode with a custom prompt message.
SWIFT_CLASS("_TtC10FuturaeKit26UnlockBiometricsOrPasscode")
@interface UnlockBiometricsOrPasscode : UnlockParameters
/// Initializes a new instance with the provided prompt message for biometric or passcode authentication.
/// \param promptReason A custom message to display for biometric or passcode authentication.
///
- (nonnull instancetype)initWithPromptReason:(NSString * _Nonnull)promptReason OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, UnlockMethodType, open) {
  UnlockMethodTypeBiometrics = 1,
  UnlockMethodTypeBiometricsOrPasscode = 2,
  UnlockMethodTypeSdkPin = 3,
  UnlockMethodTypeNone = 4,
};

/// Represents parameters for unlocking using an SDK-specific pin.
SWIFT_CLASS("_TtC10FuturaeKit12UnlockSDKPin")
@interface UnlockSDKPin : UnlockParameters
/// Initializes a new instance with the provided SDK-specific pin for unlocking.
/// \param sdkPin The SDK-specific pin for unlocking.
///
- (nonnull instancetype)initWithSdkPin:(NSString * _Nonnull)sdkPin OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumerates the types of user presence verification methods supported in the SDK.
typedef SWIFT_ENUM(NSInteger, UserPresenceVerificationType, open) {
  UserPresenceVerificationTypeBiometricsIosTouchId = 0,
  UserPresenceVerificationTypeBiometricsIosFaceId = 1,
  UserPresenceVerificationTypeAppSpecificPin = 2,
  UserPresenceVerificationTypeDeviceCredentialsIosPasscode = 3,
  UserPresenceVerificationTypePasscodeOrBiometrics = 4,
  UserPresenceVerificationTypeNone = 5,
  UserPresenceVerificationTypeUnknown = 6,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
