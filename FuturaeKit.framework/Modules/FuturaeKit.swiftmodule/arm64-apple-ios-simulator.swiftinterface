// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FuturaeKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Compression
import CryptoKit
import Darwin
import DeviceCheck
import Foundation
@_exported import FuturaeKit
import LocalAuthentication
import MachO
import ObjectiveC
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct JWS {
  public let header: FuturaeKit.JWSHeader
  public let payload: FuturaeKit.Payload
  public let signature: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public init<KeyType>(header: FuturaeKit.JWSHeader, payload: FuturaeKit.Payload, signer: FuturaeKit.Signer<KeyType>) throws
  public init(compactSerialization: Swift.String) throws
  public init(compactSerialization: Foundation.Data) throws
  @available(*, deprecated, message: "Use `isValid(for verifier:)` instead")
  public func isValid<KeyType>(for publicKey: KeyType) -> Swift.Bool
  @available(*, deprecated, message: "Use `validate(using verifier:)` instead")
  public func validate<KeyType>(with publicKey: KeyType) throws -> FuturaeKit.JWS
  public func validate(using verifier: FuturaeKit.Verifier) throws -> FuturaeKit.JWS
  public func isValid(for verifier: FuturaeKit.Verifier) -> Swift.Bool
}
extension FuturaeKit.JWS : FuturaeKit.CompactSerializable {
  public func serialize(to serializer: inout any FuturaeKit.CompactSerializer)
}
extension FuturaeKit.JWS : FuturaeKit.CompactDeserializable {
  public static var componentCount: Swift.Int {
    get
  }
  public init(from deserializer: any FuturaeKit.CompactDeserializer) throws
}
extension FuturaeKit.CS {
  public struct BigInt : Swift.SignedInteger {
    public enum Sign {
      case plus
      case minus
      public static func == (a: FuturaeKit.CS.BigInt.Sign, b: FuturaeKit.CS.BigInt.Sign) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Magnitude = FuturaeKit.CS.BigUInt
    public typealias Word = FuturaeKit.CS.BigUInt.Word
    public static var isSigned: Swift.Bool {
      get
    }
    public var magnitude: FuturaeKit.CS.BigUInt
    public var sign: FuturaeKit.CS.BigInt.Sign
    public init(sign: FuturaeKit.CS.BigInt.Sign, magnitude: FuturaeKit.CS.BigUInt)
    public var isZero: Swift.Bool {
      get
    }
    public func signum() -> FuturaeKit.CS.BigInt
  }
}
final public class MD5 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension FuturaeKit.MD5 : FuturaeKit.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension FuturaeKit.CS.BigUInt {
  public func quotientAndRemainder(dividingBy y: FuturaeKit.CS.BigUInt) -> (quotient: FuturaeKit.CS.BigUInt, remainder: FuturaeKit.CS.BigUInt)
  public static func / (x: FuturaeKit.CS.BigUInt, y: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func % (x: FuturaeKit.CS.BigUInt, y: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func /= (x: inout FuturaeKit.CS.BigUInt, y: FuturaeKit.CS.BigUInt)
  public static func %= (x: inout FuturaeKit.CS.BigUInt, y: FuturaeKit.CS.BigUInt)
}
extension FuturaeKit.CS.BigInt {
  public func quotientAndRemainder(dividingBy y: FuturaeKit.CS.BigInt) -> (quotient: FuturaeKit.CS.BigInt, remainder: FuturaeKit.CS.BigInt)
  public static func / (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func % (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public func modulus(_ mod: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
}
extension FuturaeKit.CS.BigInt {
  public static func /= (a: inout FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt)
  public static func %= (a: inout FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt)
}
public struct CCM {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case invalidParameter
    case fail
    public static func == (a: FuturaeKit.CCM.Error, b: FuturaeKit.CCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
final public class Poly1305 : FuturaeKit.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    public static func == (a: FuturaeKit.Poly1305.Error, b: FuturaeKit.Poly1305.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension FuturaeKit.CS.BigInt : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.CS.BigUInt : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct HKDF {
  public enum Error : Swift.Error {
    case invalidInput
    case derivedKeyTooLong
    public static func == (a: FuturaeKit.HKDF.Error, b: FuturaeKit.HKDF.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>? = nil, info: Swift.Array<Swift.UInt8>? = nil, keyLength: Swift.Int? = nil, variant: FuturaeKit.HMAC.Variant = .sha2(.sha256)) throws
  public func calculate() throws -> Swift.Array<Swift.UInt8>
  public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
}
public protocol DataConvertible {
  init?(_ data: Foundation.Data)
  func data() -> Foundation.Data
}
extension FuturaeKit.AES : FuturaeKit.Cryptors {
  @inlinable final public func makeEncryptor() throws -> any FuturaeKit.Cryptor & FuturaeKit.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: encrypt, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamEncryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockEncryptor(blockSize: blockSize, padding: padding, worker)
  }
  @inlinable final public func makeDecryptor() throws -> any FuturaeKit.Cryptor & FuturaeKit.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let cipherOperation: CipherOperationOnBlock = blockMode.options.contains(.useEncryptToDecrypt) == true ? encrypt : decrypt
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: cipherOperation, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamDecryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockDecryptor(blockSize: blockSize, padding: padding, worker)
  }
}
extension FuturaeKit.CS {
  public struct BigUInt : Swift.UnsignedInteger {
    public typealias Word = Swift.UInt
    public init()
    public init(words: [FuturaeKit.CS.BigUInt.Word])
    public typealias Magnitude = FuturaeKit.CS.BigUInt
  }
}
extension FuturaeKit.CS.BigUInt {
  public static var isSigned: Swift.Bool {
    get
  }
  public func signum() -> FuturaeKit.CS.BigUInt
}
final public class Blowfish {
  public enum Error : Swift.Error {
    case dataPaddingRequired
    case invalidKeyOrInitializationVector
    case invalidInitializationVector
    case invalidBlockMode
    public static func == (a: FuturaeKit.Blowfish.Error, b: FuturaeKit.Blowfish.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, blockMode: any FuturaeKit.BlockMode = CBC(iv: Array<UInt8>(repeating: 0, count: Blowfish.blockSize)), padding: FuturaeKit.Padding) throws
  @objc deinit
}
extension FuturaeKit.Blowfish : FuturaeKit.Cipher {
  final public func encrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
  final public func decrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
}
extension FuturaeKit.CS.BigUInt : Swift.Strideable {
  public typealias Stride = FuturaeKit.CS.BigInt
  public func advanced(by n: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigUInt
  public func distance(to other: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigInt
}
extension FuturaeKit.CS.BigInt : Swift.Strideable {
  public typealias Stride = FuturaeKit.CS.BigInt
  public func advanced(by n: FuturaeKit.CS.BigInt.Stride) -> FuturaeKit.CS.BigInt
  public func distance(to other: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt.Stride
}
extension FuturaeKit.CS.BigUInt {
  public init(_ buffer: Swift.UnsafeRawBufferPointer)
  public init(_ data: Foundation.Data)
  public func serialize() -> Foundation.Data
}
extension FuturaeKit.CS.BigInt {
  public init(_ buffer: Swift.UnsafeRawBufferPointer)
  public init(_ data: Foundation.Data)
  public func serialize() -> Foundation.Data
}
extension Swift.String {
  @inlinable public var bytes: Swift.Array<Swift.UInt8> {
    get {
    data(using: String.Encoding.utf8, allowLossyConversion: true)?.bytes ?? Array(utf8)
  }
  }
  @inlinable public func md5() -> Swift.String {
    self.bytes.md5().toHexString()
  }
  @inlinable public func sha1() -> Swift.String {
    self.bytes.sha1().toHexString()
  }
  @inlinable public func sha224() -> Swift.String {
    self.bytes.sha224().toHexString()
  }
  @inlinable public func sha256() -> Swift.String {
    self.bytes.sha256().toHexString()
  }
  @inlinable public func sha384() -> Swift.String {
    self.bytes.sha384().toHexString()
  }
  @inlinable public func sha512() -> Swift.String {
    self.bytes.sha512().toHexString()
  }
  @inlinable public func sha3(_ variant: FuturaeKit.SHA3.Variant) -> Swift.String {
    self.bytes.sha3(variant).toHexString()
  }
  @inlinable public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32c(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc16(seed: Swift.UInt16? = nil) -> Swift.String {
    self.bytes.crc16(seed: seed).bytes().toHexString()
  }
  @inlinable public func encrypt(cipher: any FuturaeKit.Cipher) throws -> Swift.String {
    try self.bytes.encrypt(cipher: cipher).toHexString()
  }
  @inlinable public func encryptToBase64(cipher: any FuturaeKit.Cipher) throws -> Swift.String {
    try self.bytes.encrypt(cipher: cipher).toBase64()
  }
  @inlinable public func authenticate<A>(with authenticator: A) throws -> Swift.String where A : FuturaeKit.Authenticator {
    try self.bytes.authenticate(with: authenticator).toHexString()
  }
}
extension Security.SecKey : FuturaeKit.ExpressibleAsECPublicKeyComponents {
  public static func representing(ecPublicKeyComponents components: FuturaeKit.ECPublicKeyComponents) throws -> Self
  public func ecPublicKeyComponents() throws -> FuturaeKit.ECPublicKeyComponents
}
public protocol Updatable {
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
extension FuturaeKit.Updatable {
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: isLast)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes.slice, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.update(withBytes: bytes.slice, isLast: isLast, output: output)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.finish(withBytes: bytes.slice)
  }
  @inlinable public mutating func finish() throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: [], isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: true)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: bytes.slice, output: output)
  }
  @inlinable public mutating func finish(output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: [], output: output)
  }
}
@_inheritsConvenienceInitializers @objc public class JWEDecryption : ObjectiveC.NSObject {
  @objc public class func decrypt(key: Foundation.Data, encryptedData: Swift.String) -> [[Swift.String : Any]]?
  @objc override dynamic public init()
  @objc deinit
}
extension FuturaeKit.RSAPublicKey : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.RSAPublicKey : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension FuturaeKit.RSAPrivateKey : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.RSAPrivateKey : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.UInt32 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt32(bytes[index.advanced(by: 0)]) << 24 : 0
    let val1 = count > 1 ? UInt32(bytes[index.advanced(by: 1)]) << 16 : 0
    let val2 = count > 2 ? UInt32(bytes[index.advanced(by: 2)]) << 8 : 0
    let val3 = count > 3 ? UInt32(bytes[index.advanced(by: 3)]) : 0

    self = val0 | val1 | val2 | val3
  }
}
public enum JOSESwiftError : Swift.Error {
  case signingFailed(description: Swift.String)
  case verifyingFailed(description: Swift.String)
  case signatureInvalid
  case encryptingFailed(description: Swift.String)
  case decryptingFailed(description: Swift.String)
  case wrongDataEncoding(data: Foundation.Data)
  case invalidCompactSerializationComponentCount(count: Swift.Int)
  case componentNotValidBase64URL(component: Swift.String)
  case componentCouldNotBeInitializedFromData(data: Foundation.Data)
  case couldNotConstructJWK
  case modulusNotBase64URLUIntEncoded
  case exponentNotBase64URLUIntEncoded
  case privateExponentNotBase64URLUIntEncoded
  case symmetricKeyNotBase64URLEncoded
  case xNotBase64URLUIntEncoded
  case yNotBase64URLUIntEncoded
  case privateKeyNotBase64URLUIntEncoded
  case invalidCurveType
  case compressedCurvePointsUnsupported
  case invalidCurvePointOctetLength
  case localAuthenticationFailed(errorCode: Swift.Int)
  case compressionFailed
  case decompressionFailed
  case compressionAlgorithmNotSupported
  case rawDataMustBeGreaterThanZero
  case compressedDataMustBeGreaterThanZero
  case thumbprintSerialization
}
extension FuturaeKit.CS.BigUInt {
  public subscript(bitAt index: Swift.Int) -> Swift.Bool {
    get
    set
  }
}
extension FuturaeKit.CS.BigUInt {
  public var bitWidth: Swift.Int {
    get
  }
  public var leadingZeroBitCount: Swift.Int {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
}
extension FuturaeKit.CS.BigInt {
  public var bitWidth: Swift.Int {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
}
extension FuturaeKit.CS.BigUInt {
  public struct Words : Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> FuturaeKit.CS.BigUInt.Word {
      get
    }
    public typealias Element = FuturaeKit.CS.BigUInt.Word
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public typealias Iterator = Swift.IndexingIterator<FuturaeKit.CS.BigUInt.Words>
    public typealias SubSequence = Swift.Slice<FuturaeKit.CS.BigUInt.Words>
  }
  public var words: FuturaeKit.CS.BigUInt.Words {
    get
  }
  public init<Words>(words: Words) where Words : Swift.Sequence, Words.Element == Swift.UInt
}
extension FuturaeKit.CS.BigInt {
  public struct Words : Swift.RandomAccessCollection {
    public typealias Indices = Swift.CountableRange<Swift.Int>
    public var count: Swift.Int {
      get
    }
    public var indices: FuturaeKit.CS.BigInt.Words.Indices {
      get
    }
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> Swift.UInt {
      get
    }
    public typealias Element = Swift.UInt
    public typealias Index = Swift.Int
    public typealias Iterator = Swift.IndexingIterator<FuturaeKit.CS.BigInt.Words>
    public typealias SubSequence = Swift.Slice<FuturaeKit.CS.BigInt.Words>
  }
  public var words: FuturaeKit.CS.BigInt.Words {
    get
  }
  public init<S>(words: S) where S : Swift.Sequence, S.Element == Swift.UInt
}
extension Swift.Array where Element == Swift.UInt8 {
  public func toBase64(options: Foundation.Data.Base64EncodingOptions = []) -> Swift.String
  public init(base64: Swift.String, options: Foundation.Data.Base64DecodingOptions = .ignoreUnknownCharacters)
}
extension Security.SecKey : FuturaeKit.ExpressibleAsECPrivateKeyComponents {
  public static func representing(ecPrivateKeyComponents components: FuturaeKit.ECPrivateKeyComponents) throws -> Self
  public func ecPrivateKeyComponents() throws -> FuturaeKit.ECPrivateKeyComponents
}
public struct ECB : FuturaeKit.BlockMode {
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init()
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
public enum PKCS7 {
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var accumulatedHash: Swift.Array<Swift.UInt64>
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: FuturaeKit.SHA3.Variant, b: FuturaeKit.SHA3.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(variant: FuturaeKit.SHA3.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt64>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @objc deinit
}
extension FuturaeKit.SHA3 : FuturaeKit.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      // Add padding
      let markByteIndex = self.accumulated.count

      // We need to always pad the input. Even if the input is a multiple of blockSize.
      let r = self.blockSize * 8
      let q = (r / 8) - (accumulated.count % (r / 8))
      self.accumulated += Array<UInt8>(repeating: 0, count: q)

      self.accumulated[markByteIndex] |= self.markByte
      self.accumulated[self.accumulated.count - 1] |= 0x80
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        self.process(block: chunk.toUInt64Array().slice, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)

    // TODO: verify performance, reduce vs for..in
    let result = self.accumulatedHash.reduce(into: Array<UInt8>()) { (result, value) in
      result += value.bigEndian.bytes()
    }

    // reset hash value for instance
    if isLast {
      self.accumulatedHash = Array<UInt64>(repeating: 0, count: self.digestLength)
    }

    return Array(result[0..<self.digestLength])
  }
}
extension FuturaeKit.RSA : FuturaeKit.Signature {
  final public func sign(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func sign(_ bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.RSA.SignatureVariant) throws -> Swift.Array<Swift.UInt8>
  final public func verify(signature: Swift.ArraySlice<Swift.UInt8>, for expectedData: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Bool
  final public func verify(signature: Swift.Array<Swift.UInt8>, for bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.RSA.SignatureVariant) throws -> Swift.Bool
}
extension FuturaeKit.RSA {
  public enum SignatureVariant {
    case raw
    case message_pkcs1v15_MD5
    case message_pkcs1v15_SHA1
    case message_pkcs1v15_SHA224
    case message_pkcs1v15_SHA256
    case message_pkcs1v15_SHA384
    case message_pkcs1v15_SHA512
    case message_pkcs1v15_SHA512_224
    case message_pkcs1v15_SHA512_256
    case digest_pkcs1v15_RAW
    case digest_pkcs1v15_MD5
    case digest_pkcs1v15_SHA1
    case digest_pkcs1v15_SHA224
    case digest_pkcs1v15_SHA256
    case digest_pkcs1v15_SHA384
    case digest_pkcs1v15_SHA512
    case digest_pkcs1v15_SHA512_224
    case digest_pkcs1v15_SHA512_256
    public static func == (a: FuturaeKit.RSA.SignatureVariant, b: FuturaeKit.RSA.SignatureVariant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct CTR {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: FuturaeKit.CTR.Error, b: FuturaeKit.CTR.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, counter: Swift.Int = 0)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
extension FuturaeKit.CS.BigUInt {
  public func greatestCommonDivisor(with b: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public func inverse(_ modulus: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt?
}
extension FuturaeKit.CS.BigInt {
  public func greatestCommonDivisor(with b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public func inverse(_ modulus: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt?
}
extension FuturaeKit.CS.BigUInt : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FuturaeKit.CS.BigInt : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class Rabbit {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    public static func == (a: FuturaeKit.Rabbit.Error, b: FuturaeKit.Rabbit.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let ivSize: Swift.Int
  public static let keySize: Swift.Int
  public static let blockSize: Swift.Int
  final public var keySize: Swift.Int {
    get
  }
  convenience public init(key: Swift.Array<Swift.UInt8>) throws
  public init(key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>?) throws
  @objc deinit
}
extension FuturaeKit.Rabbit : FuturaeKit.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
final public class SHA1 {
  @usableFromInline
  internal static let digestLength: Swift.Int
  @usableFromInline
  internal static let blockSize: Swift.Int
  @usableFromInline
  internal static let hashInitialValue: Swift.ContiguousArray<Swift.UInt32>
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash: Swift.ContiguousArray<Swift.UInt32>
  public init()
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.ContiguousArray<Swift.UInt32>)
  @objc deinit
}
extension FuturaeKit.SHA1 : FuturaeKit.Updatable {
  @discardableResult
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: 64 / 8) // A 64-bit representation of b

      // Step 1. Append padding
      bitPadding(to: &self.accumulated, blockSize: SHA1.blockSize, allowance: 64 / 8)

      // Step 2. Append Length a 64-bit representation of lengthInBits
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: SHA1.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= SHA1.blockSize {
        self.process(block: chunk, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

    // output current hash
    var result = Array<UInt8>(repeating: 0, count: SHA1.digestLength)
    var pos = 0
    for idx in 0..<self.accumulatedHash.count {
      let h = self.accumulatedHash[idx]
      result[pos + 0] = UInt8((h >> 24) & 0xff)
      result[pos + 1] = UInt8((h >> 16) & 0xff)
      result[pos + 2] = UInt8((h >> 8) & 0xff)
      result[pos + 3] = UInt8(h & 0xff)
      pos += 4
    }

    // reset hash value for instance
    if isLast {
      self.accumulatedHash = SHA1.hashInitialValue
    }

    return result
  }
}
extension FuturaeKit.PKCS5 {
  public struct PBKDF2 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: FuturaeKit.PKCS5.PBKDF2.Error, b: FuturaeKit.PKCS5.PBKDF2.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil, variant: FuturaeKit.HMAC.Variant = .sha2(.sha256)) throws
    public func calculate() throws -> Swift.Array<Swift.UInt8>
    public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
  }
}
public enum JWKKeyType : Swift.String, Swift.Codable {
  case RSA
  case OCT
  case EC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol JWK : Swift.Decodable, Swift.Encodable {
  var keyType: FuturaeKit.JWKKeyType { get }
  var parameters: [Swift.String : Swift.String] { get }
  var requiredParameters: [Swift.String : Swift.String] { get }
  subscript(parameter: Swift.String) -> Swift.String? { get }
  init(data: Foundation.Data) throws
  func jsonString() -> Swift.String?
  func jsonData() -> Foundation.Data?
  @available(iOS 11.0, *)
  func thumbprint(algorithm: FuturaeKit.JWKThumbprintAlgorithm) throws -> Swift.String
  @available(iOS 11.0, *)
  func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm) throws -> Self
}
extension FuturaeKit.JWK {
  @available(iOS 11.0, *)
  public func thumbprint(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> Swift.String
}
public protocol CommonHeaderParameterSpace {
  var jku: Foundation.URL? { get set }
  var jwk: Swift.String? { get set }
  var jwkTyped: (any FuturaeKit.JWK)? { get set }
  var kid: Swift.String? { get set }
  var x5u: Foundation.URL? { get set }
  var x5c: [Swift.String]? { get set }
  var x5t: Swift.String? { get set }
  var x5tS256: Swift.String? { get set }
  var typ: Swift.String? { get set }
  var cty: Swift.String? { get set }
  var crit: [Swift.String]? { get set }
}
extension FuturaeKit.PKCS5 {
  public struct PBKDF1 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: FuturaeKit.PKCS5.PBKDF1.Error, b: FuturaeKit.PKCS5.PBKDF1.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Variant {
      case md5, sha1
      @usableFromInline
      internal var size: Swift.Int {
        get
      }
      @usableFromInline
      internal func calculateHash(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
      public static func == (a: FuturaeKit.PKCS5.PBKDF1.Variant, b: FuturaeKit.PKCS5.PBKDF1.Variant) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @usableFromInline
    internal let iterations: Swift.Int
    @usableFromInline
    internal let variant: FuturaeKit.PKCS5.PBKDF1.Variant
    @usableFromInline
    internal let keyLength: Swift.Int
    @usableFromInline
    internal let t1: Swift.Array<Swift.UInt8>
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, variant: FuturaeKit.PKCS5.PBKDF1.Variant = .sha1, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil) throws
    @inlinable public func calculate() -> Swift.Array<Swift.UInt8> {
      var t = self.t1
      for _ in 2...self.iterations {
        t = self.variant.calculateHash(t)
      }
      return Array(t[0..<self.keyLength])
    }
    public func callAsFunction() -> Swift.Array<Swift.UInt8>
  }
}
extension FuturaeKit.HMAC {
  convenience public init(key: Swift.String, variant: FuturaeKit.HMAC.Variant = .md5) throws
}
public typealias FailedCheckType = (check: FuturaeKit.FailedCheck, failMessage: Swift.String)
public enum FailedCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  case openedPorts
  case pSelectFlag
  case suspiciousObjCClasses
  public static func == (a: FuturaeKit.FailedCheck, b: FuturaeKit.FailedCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [FuturaeKit.FailedCheck]
  public static var allCases: [FuturaeKit.FailedCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension FuturaeKit.CS.BigUInt {
  public static func + (a: FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func += (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
}
extension FuturaeKit.CS.BigInt {
  public static func + (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func += (a: inout FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt)
}
extension Swift.Collection where Self.Element == Swift.UInt8, Self.Index == Swift.Int {
  @inlinable internal func toUInt32Array() -> Swift.Array<Swift.UInt32> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 4)
    return Array<UInt32>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 4) {
        let val = UInt32(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
  @inlinable internal func toUInt64Array() -> Swift.Array<Swift.UInt64> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 8)
    return Array<UInt64>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 8) {
        let val = UInt64(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
}
@usableFromInline
internal func strideCount(from: Swift.Int, to: Swift.Int, by: Swift.Int) -> Swift.Int
@usableFromInline
final internal class StreamEncryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: any FuturaeKit.CipherModeWorker
  @usableFromInline
  final internal let padding: FuturaeKit.Padding
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: FuturaeKit.Padding, _ worker: any FuturaeKit.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    var accumulated = Array(bytes)
    if isLast {
      // CTR doesn't need padding. Really. Add padding to the last block if really want. but... don't.
      accumulated = self.padding.add(to: accumulated, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    var encrypted = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in accumulated.batched(by: self.blockSize) {
      encrypted += self.worker.encrypt(block: chunk)
    }

    // omit unecessary calculation if not needed
    if self.padding != .noPadding {
      self.lastBlockRemainder = encrypted.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if var finalizingWorker = worker as? FinalizingEncryptModeWorker, isLast == true {
      encrypted = Array(try finalizingWorker.finalize(encrypt: encrypted.slice))
    }

    return encrypted
  }
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
extension FuturaeKit.CS.BigUInt {
  public mutating func multiply(byWord y: FuturaeKit.CS.BigUInt.Word)
  public func multiplied(byWord y: FuturaeKit.CS.BigUInt.Word) -> FuturaeKit.CS.BigUInt
  public mutating func multiplyAndAdd(_ x: FuturaeKit.CS.BigUInt, _ y: FuturaeKit.CS.BigUInt.Word, shiftedBy shift: Swift.Int = 0)
  public func multiplied(by y: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static var directMultiplicationLimit: Swift.Int
  public static func * (x: FuturaeKit.CS.BigUInt, y: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func *= (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
}
extension FuturaeKit.CS.BigInt {
  public static func * (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func *= (a: inout FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt)
}
extension Foundation.Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public init?(base64URLEncoded base64URLData: Foundation.Data)
  public func base64URLEncodedString() -> Swift.String
  public func base64URLEncodedData() -> Foundation.Data
}
extension Foundation.Data : FuturaeKit.DataConvertible {
  public init(_ data: Foundation.Data)
  public func data() -> Foundation.Data
}
extension FuturaeKit.ChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
extension FuturaeKit.CS.BigUInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryInteger
  public init<T>(_ source: T) where T : Swift.BinaryInteger
  public init<T>(truncatingIfNeeded source: T) where T : Swift.BinaryInteger
  public init<T>(clamping source: T) where T : Swift.BinaryInteger
}
extension FuturaeKit.CS.BigInt {
  public init()
  public init(_ integer: FuturaeKit.CS.BigUInt)
  public init<T>(_ source: T) where T : Swift.BinaryInteger
  public init?<T>(exactly source: T) where T : Swift.BinaryInteger
  public init<T>(clamping source: T) where T : Swift.BinaryInteger
  public init<T>(truncatingIfNeeded source: T) where T : Swift.BinaryInteger
}
extension FuturaeKit.CS.BigUInt : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.UInt64)
  public typealias IntegerLiteralType = Swift.UInt64
}
extension FuturaeKit.CS.BigInt : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int64)
  public typealias IntegerLiteralType = Swift.Int64
}
@objc public enum AppAttestError : Swift.Int, Swift.Error {
  case ServiceNotSupported = 0
  case KeyIdFailure = 1
  case KeyIdDefaultsNotFound = 2
  case AttestationFailure = 3
  case AssertionFailure = 4
  case RetrieveChallengeFailure = 5
  case AppIntegrityNotVerified = 6
  case ResponseError = 7
  case NoAccountsEnrolled = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc public class AppAttest : ObjectiveC.NSObject {
  @objc public static let keyIdDefaults: Swift.String
  @objc public static let attestationType: Swift.String
  @objc public static let assertionType: Swift.String
  @available(iOS 14.0, *)
  @objc public class func getAttestOrAssert(type: Swift.String, challenge: Swift.String, success: @escaping (_ data: Swift.String, _ keyId: Swift.String) -> Swift.Void, failure: @escaping (_ error: any Swift.Error) -> Swift.Void)
  @available(iOS 14.0, *)
  @objc public class func getAttestation(challenge: Swift.String, success: @escaping (_ data: Swift.String, _ keyId: Swift.String) -> Swift.Void, failure: @escaping (_ error: any Swift.Error) -> Swift.Void)
  @available(iOS 14.0, *)
  @objc public class func getAssertion(challenge: Swift.String, success: @escaping (_ data: Swift.String, _ keyId: Swift.String) -> Swift.Void, failure: @escaping (_ error: any Swift.Error) -> Swift.Void)
  @objc public class func errorForType(_ type: FuturaeKit.AppAttestError, rawError: Foundation.NSError? = nil) -> Foundation.NSError
  @objc override dynamic public init()
  @objc deinit
}
@usableFromInline
final internal class StreamDecryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: any FuturaeKit.CipherModeWorker
  @usableFromInline
  final internal let padding: FuturaeKit.Padding
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: FuturaeKit.Padding, _ worker: any FuturaeKit.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    let toProcess = self.accumulated.prefix(max(self.accumulated.count - self.worker.additionalBufferSize, 0))

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      // will truncate suffix if needed
      try finalizingWorker.willDecryptLast(bytes: self.accumulated.slice)
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: bytes.count + self.worker.additionalBufferSize)
    for chunk in toProcess.batched(by: self.blockSize) {
      plaintext += self.worker.decrypt(block: chunk)
      processedBytesCount += chunk.count
    }

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
    }

    // omit unecessary calculation if not needed
    if self.padding != .noPadding {
      self.lastBlockRemainder = plaintext.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if isLast {
      // CTR doesn't need padding. Really. Add padding to the last block if really want. but... don't.
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    self.accumulated.removeFirst(processedBytesCount) // super-slow

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.finalize(decrypt: plaintext.slice))
    }

    return plaintext
  }
  @inlinable final public func seek(to position: Swift.Int) throws {
    guard var worker = self.worker as? SeekableModeWorker else {
      fatalError("Not supported")
    }

    try worker.seek(to: position)
    self.worker = worker
  }
  @objc @usableFromInline
  deinit
}
@usableFromInline
internal struct BatchedCollectionIndex<Base> where Base : Swift.Collection {
}
extension FuturaeKit.BatchedCollectionIndex : Swift.Comparable {
  @usableFromInline
  internal static func == <BaseCollection>(lhs: FuturaeKit.BatchedCollectionIndex<BaseCollection>, rhs: FuturaeKit.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
  @usableFromInline
  internal static func < <BaseCollection>(lhs: FuturaeKit.BatchedCollectionIndex<BaseCollection>, rhs: FuturaeKit.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
}
@usableFromInline
internal struct BatchedCollection<Base> : Swift.Collection where Base : Swift.Collection {
  @usableFromInline
  internal init(base: Base, size: Swift.Int)
  @usableFromInline
  internal typealias Index = FuturaeKit.BatchedCollectionIndex<Base>
  @usableFromInline
  internal var startIndex: FuturaeKit.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal var endIndex: FuturaeKit.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal func index(after idx: FuturaeKit.BatchedCollection<Base>.Index) -> FuturaeKit.BatchedCollection<Base>.Index
  @usableFromInline
  internal subscript(idx: FuturaeKit.BatchedCollection<Base>.Index) -> Base.SubSequence {
    get
  }
  @usableFromInline
  internal typealias Element = Base.SubSequence
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<FuturaeKit.BatchedCollection<Base>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<FuturaeKit.BatchedCollection<Base>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<FuturaeKit.BatchedCollection<Base>>
}
extension Swift.Collection {
  @inlinable internal func batched(by size: Swift.Int) -> FuturaeKit.BatchedCollection<Self> {
    BatchedCollection(base: self, size: size)
  }
}
public struct BlockModeOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @usableFromInline
  internal static let none: FuturaeKit.BlockModeOption
  @usableFromInline
  internal static let initializationVectorRequired: FuturaeKit.BlockModeOption
  @usableFromInline
  internal static let paddingRequired: FuturaeKit.BlockModeOption
  @usableFromInline
  internal static let useEncryptToDecrypt: FuturaeKit.BlockModeOption
  public typealias ArrayLiteralElement = FuturaeKit.BlockModeOption
  public typealias Element = FuturaeKit.BlockModeOption
  public typealias RawValue = Swift.Int
}
public enum Bit : Swift.Int {
  case zero
  case one
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FuturaeKit.Bit {
  @inlinable internal func inverted() -> FuturaeKit.Bit {
    self == .zero ? .one : .zero
  }
}
final public class Checksum {
  @usableFromInline
  internal static let table32: [Swift.UInt32]
  @usableFromInline
  internal static let table32c: [Swift.UInt32]
  @usableFromInline
  internal static let table16: [Swift.UInt16]
  @usableFromInline
  internal init()
  @inlinable final internal func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32c[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    var crc: UInt16 = seed != nil ? seed! : 0x0000
    for chunk in message.batched(by: 256) {
      for b in chunk {
        crc = (crc >> 8) ^ Checksum.table16[Int((crc ^ UInt16(b)) & 0xFF)]
      }
    }
    return crc
  }
  @objc deinit
}
extension FuturaeKit.Checksum {
  @inlinable public static func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32c(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    Checksum().crc16(message, seed: seed)
  }
}
extension FuturaeKit.CS.BigUInt {
  public func isStrongProbablePrime(_ base: FuturaeKit.CS.BigUInt) -> Swift.Bool
  public func isPrime(rounds: Swift.Int = 10) -> Swift.Bool
}
extension FuturaeKit.CS.BigInt {
  public func isStrongProbablePrime(_ base: FuturaeKit.CS.BigInt) -> Swift.Bool
  public func isPrime(rounds: Swift.Int = 10) -> Swift.Bool
}
final public class GCM : FuturaeKit.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: FuturaeKit.GCM.Mode, b: FuturaeKit.GCM.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: FuturaeKit.BlockModeOption
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case fail
    public static func == (a: FuturaeKit.GCM.Error, b: FuturaeKit.GCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: FuturaeKit.GCM.Mode = .detached)
  convenience public init(iv: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: FuturaeKit.GCM.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
  @objc deinit
}
public enum SignatureAlgorithm : Swift.String {
  case RS256
  case RS384
  case RS512
  @available(iOS 11, *)
  case PS256
  @available(iOS 11, *)
  case PS384
  @available(iOS 11, *)
  case PS512
  case ES256
  case ES384
  case ES512
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KeyManagementAlgorithm : Swift.String, Swift.CaseIterable {
  case RSA1_5
  case RSAOAEP
  case RSAOAEP256
  case A128KW
  case A192KW
  case A256KW
  case direct
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FuturaeKit.KeyManagementAlgorithm]
  public typealias RawValue = Swift.String
  public static var allCases: [FuturaeKit.KeyManagementAlgorithm] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentEncryptionAlgorithm : Swift.String {
  case A256CBCHS512
  case A128CBCHS256
  case AES256GCM
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HMACAlgorithm : Swift.String {
  case SHA512
  case SHA256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum JWKThumbprintAlgorithm : Swift.String {
  case SHA256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompressionAlgorithm : Swift.String {
  case DEFLATE
  case NONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(*, deprecated, message: "Use `KeyManagementAlgorithm` instead")
public typealias AsymmetricKeyAlgorithm = FuturaeKit.KeyManagementAlgorithm
@available(*, deprecated, message: "Use `ContentEncryptionAlgorithm` instead")
public typealias SymmetricKeyAlgorithm = FuturaeKit.ContentEncryptionAlgorithm
public class BlockDecryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let padding: FuturaeKit.Padding
  @usableFromInline
  internal var worker: any FuturaeKit.CipherModeWorker
  @usableFromInline
  internal var accumulated: [Swift.UInt8]
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: FuturaeKit.Padding, _ worker: any FuturaeKit.CipherModeWorker) throws
  @inlinable public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    // If a worker (eg GCM) can combine ciphertext + tag
    // we need to remove tag from the ciphertext.
    if !isLast && self.accumulated.count < self.blockSize + self.worker.additionalBufferSize {
      return []
    }

    let accumulatedWithoutSuffix: Array<UInt8>
    if self.worker.additionalBufferSize > 0 {
      // FIXME: how slow is that?
      accumulatedWithoutSuffix = Array(self.accumulated.prefix(self.accumulated.count - self.worker.additionalBufferSize))
    } else {
      accumulatedWithoutSuffix = self.accumulated
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: accumulatedWithoutSuffix.count)
    // Processing in a block-size manner. It's good for block modes, but bad for stream modes.
    for var chunk in accumulatedWithoutSuffix.batched(by: self.blockSize) {
      if isLast || (accumulatedWithoutSuffix.count - processedBytesCount) >= blockSize {
        let isLastChunk = processedBytesCount + chunk.count == accumulatedWithoutSuffix.count

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          chunk = try finalizingWorker.willDecryptLast(bytes: chunk + accumulated.suffix(worker.additionalBufferSize)) // tag size
        }

        if !chunk.isEmpty {
          plaintext += worker.decrypt(block: chunk)
        }

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
        }

        processedBytesCount += chunk.count
      }
    }
    accumulated.removeFirst(processedBytesCount) // super-slow

    if isLast {
      if accumulatedWithoutSuffix.isEmpty, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
        try finalizingWorker.willDecryptLast(bytes: self.accumulated.suffix(self.worker.additionalBufferSize))
        plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
      }
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize)
    }

    return plaintext
  }
  public func seek(to position: Swift.Int) throws
  @objc deinit
}
final public class ChaCha20 {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: FuturaeKit.ChaCha20.Error, b: FuturaeKit.ChaCha20.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension FuturaeKit.ChaCha20 : FuturaeKit.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension FuturaeKit.ChaCha20 {
  public struct ChaChaEncryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension FuturaeKit.ChaCha20 {
  public struct ChaChaDecryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = true) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension FuturaeKit.ChaCha20 : FuturaeKit.Cryptors {
  final public func makeEncryptor() -> any FuturaeKit.Cryptor & FuturaeKit.Updatable
  final public func makeDecryptor() -> any FuturaeKit.Cryptor & FuturaeKit.Updatable
}
public protocol AEAD {
  static var kLen: Swift.Int { get }
  static var ivRange: Swift.Range<Swift.Int> { get }
}
extension Swift.UInt64 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt64(bytes[index.advanced(by: 0)]) << 56 : 0
    let val1 = count > 1 ? UInt64(bytes[index.advanced(by: 1)]) << 48 : 0
    let val2 = count > 2 ? UInt64(bytes[index.advanced(by: 2)]) << 40 : 0
    let val3 = count > 3 ? UInt64(bytes[index.advanced(by: 3)]) << 32 : 0
    let val4 = count > 4 ? UInt64(bytes[index.advanced(by: 4)]) << 24 : 0
    let val5 = count > 5 ? UInt64(bytes[index.advanced(by: 5)]) << 16 : 0
    let val6 = count > 6 ? UInt64(bytes[index.advanced(by: 6)]) << 8 : 0
    let val7 = count > 7 ? UInt64(bytes[index.advanced(by: 7)]) : 0

    self = val0 | val1 | val2 | val3 | val4 | val5 | val6 | val7
  }
}
@_inheritsConvenienceInitializers @objc public class ASN1DERParsing : ObjectiveC.NSObject {
  @objc public class func unpackBERencodedASN1formatToRaw(signature: Foundation.NSData) throws -> Foundation.NSData
  @objc override dynamic public init()
  @objc deinit
}
@_specialize(exported: false, kind: full, where T == Swift.Int)
@_specialize(exported: false, kind: full, where T == Swift.UInt)
@_specialize(exported: false, kind: full, where T == Swift.UInt8)
@_specialize(exported: false, kind: full, where T == Swift.UInt16)
@_specialize(exported: false, kind: full, where T == Swift.UInt32)
@_specialize(exported: false, kind: full, where T == Swift.UInt64)
@inlinable internal func arrayOfBytes<T>(value: T, length totalBytes: Swift.Int = MemoryLayout<T>.size) -> Swift.Array<Swift.UInt8> where T : Swift.FixedWidthInteger {
  let valuePointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  valuePointer.pointee = value

  let bytesPointer = UnsafeMutablePointer<UInt8>(OpaquePointer(valuePointer))
  var bytes = Array<UInt8>(repeating: 0, count: totalBytes)
  for j in 0..<min(MemoryLayout<T>.size, totalBytes) {
    bytes[totalBytes - 1 - j] = (bytesPointer + j).pointee
  }

  valuePointer.deinitialize(count: 1)
  valuePointer.deallocate()

  return bytes
}
public struct PCBC : FuturaeKit.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: FuturaeKit.PCBC.Error, b: FuturaeKit.PCBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
extension Security.SecKey : FuturaeKit.ExpressibleAsRSAPublicKeyComponents {
  public static func representing(rsaPublicKeyComponents components: FuturaeKit.RSAPublicKeyComponents) throws -> Self
  public func rsaPublicKeyComponents() throws -> FuturaeKit.RSAPublicKeyComponents
}
extension FuturaeKit.CS.BigUInt {
  public static func randomInteger<RNG>(withMaximumWidth width: Swift.Int, using generator: inout RNG) -> FuturaeKit.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(withMaximumWidth width: Swift.Int) -> FuturaeKit.CS.BigUInt
  public static func randomInteger<RNG>(withExactWidth width: Swift.Int, using generator: inout RNG) -> FuturaeKit.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(withExactWidth width: Swift.Int) -> FuturaeKit.CS.BigUInt
  public static func randomInteger<RNG>(lessThan limit: FuturaeKit.CS.BigUInt, using generator: inout RNG) -> FuturaeKit.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(lessThan limit: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
}
public struct JWSHeader {
  public init(algorithm: FuturaeKit.SignatureAlgorithm)
  public init(parameters: [Swift.String : Any]) throws
}
extension FuturaeKit.JWSHeader {
  public var algorithm: FuturaeKit.SignatureAlgorithm? {
    get
  }
}
extension FuturaeKit.JWSHeader : FuturaeKit.CommonHeaderParameterSpace {
  public var jku: Foundation.URL? {
    get
    set
  }
  public var jwk: Swift.String? {
    get
    set
  }
  public var jwkTyped: (any FuturaeKit.JWK)? {
    get
    set
  }
  public var kid: Swift.String? {
    get
    set
  }
  public var x5u: Foundation.URL? {
    get
    set
  }
  public var x5c: [Swift.String]? {
    get
    set
  }
  public var x5t: Swift.String? {
    get
    set
  }
  public var x5tS256: Swift.String? {
    get
    set
  }
  public var typ: Swift.String? {
    get
    set
  }
  public var cty: Swift.String? {
    get
    set
  }
  public var crit: [Swift.String]? {
    get
    set
  }
}
public struct CBC : FuturaeKit.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: FuturaeKit.CBC.Error, b: FuturaeKit.CBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
final public class HMAC : FuturaeKit.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    case invalidInput
    public static func == (a: FuturaeKit.HMAC.Error, b: FuturaeKit.HMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant {
    case md5
    case sha1
    case sha2(FuturaeKit.SHA2.Variant)
    case sha3(FuturaeKit.SHA3.Variant)
    @available(*, deprecated, message: "Use sha2(variant) instead.")
    case sha256, sha384, sha512
  }
  public init(key: Swift.Array<Swift.UInt8>, variant: FuturaeKit.HMAC.Variant = .md5)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public protocol Cryptor {
  mutating func seek(to: Swift.Int) throws
}
extension Swift.FixedWidthInteger {
  @inlinable internal func bytes(totalBytes: Swift.Int = MemoryLayout<Self>.size) -> Swift.Array<Swift.UInt8> {
    arrayOfBytes(value: self.littleEndian, length: totalBytes)
    // TODO: adjust bytes order
    // var value = self.littleEndian
    // return withUnsafeBytes(of: &value, Array.init).reversed()
  }
}
extension FuturaeKit.RSA : FuturaeKit.Cipher {
  @inlinable final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    return try self.encrypt(Array<UInt8>(bytes), variant: .pksc1v15)
  }
  @inlinable final public func encrypt(_ bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.RSA.RSAEncryptionVariant) throws -> Swift.Array<Swift.UInt8> {
    // Prepare the data for the specified variant
    let preparedData = try variant.prepare(bytes, blockSize: self.keySizeBytes)

    // Encrypt the prepared data
    return try variant.formatEncryptedBytes(self.encryptPreparedBytes(preparedData), blockSize: self.keySizeBytes)
  }
  @inlinable final internal func encryptPreparedBytes(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    // Calculate encrypted data
    return BigUInteger(Data(bytes)).power(self.e, modulus: self.n).serialize().bytes
  }
  @inlinable final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    return try self.decrypt(Array<UInt8>(bytes), variant: .pksc1v15)
  }
  @inlinable final public func decrypt(_ bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.RSA.RSAEncryptionVariant) throws -> Swift.Array<Swift.UInt8> {
    // Decrypt the data
    let decrypted = try self.decryptPreparedBytes(bytes)

    // Remove padding / unstructure data and return the raw plaintext
    return variant.removePadding(decrypted, blockSize: self.keySizeBytes)
  }
  @inlinable final internal func decryptPreparedBytes(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    // Check for Private Exponent presence
    guard let d = d else { throw RSA.Error.noPrivateKey }

    // Calculate decrypted data
    return BigUInteger(Data(bytes)).power(d, modulus: self.n).serialize().bytes
  }
}
extension FuturaeKit.RSA {
  @frozen public enum RSAEncryptionVariant {
    case unsafe
    case raw
    case pksc1v15
    @inlinable internal func prepare(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) throws -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw:
          // We need at least 11 bytes of padding in order to safely encrypt messages
          // - block types 1 and 2 have this minimum padding requirement, block type 0 isn't specified, but we enforce the minimum padding length here to be safe.
          guard blockSize >= bytes.count + 11 else { throw RSA.Error.invalidMessageLengthForEncryption }
          return Array(repeating: 0x00, count: blockSize - bytes.count) + bytes
        case .pksc1v15:
          // The `Security` framework refuses to encrypt a zero byte message using the pkcs1v15 padding scheme, so we do the same
          guard !bytes.isEmpty else { throw RSA.Error.invalidMessageLengthForEncryption }
          // We need at least 11 bytes of random padding in order to safely encrypt messages (RFC2313 Section 8.1 - Note 6)
          guard blockSize >= bytes.count + 11 else { throw RSA.Error.invalidMessageLengthForEncryption }
          return Padding.eme_pkcs1v15.add(to: bytes, blockSize: blockSize)
      }
    }
    @inlinable internal func formatEncryptedBytes(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw, .pksc1v15:
          // Format the encrypted bytes before returning
          return Array<UInt8>(repeating: 0x00, count: blockSize - bytes.count) + bytes
      }
    }
    @inlinable internal func removePadding(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw:
          return bytes
        case .pksc1v15:
          // Convert the Octet String into an Integer Primitive using the BigInteger `serialize` method
          // (this effectively just prefixes the data with a 0x00 byte indicating that its a positive integer)
          return Padding.eme_pkcs1v15.remove(from: [0x00] + bytes, blockSize: blockSize)
      }
    }
    public static func == (a: FuturaeKit.RSA.RSAEncryptionVariant, b: FuturaeKit.RSA.RSAEncryptionVariant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Foundation.Data {
  public func checksum() -> Swift.UInt16
  public func md5() -> Foundation.Data
  public func sha1() -> Foundation.Data
  public func sha224() -> Foundation.Data
  public func sha256() -> Foundation.Data
  public func sha384() -> Foundation.Data
  public func sha512() -> Foundation.Data
  public func sha3(_ variant: FuturaeKit.SHA3.Variant) -> Foundation.Data
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc16(seed: Swift.UInt16? = nil) -> Foundation.Data
  public func encrypt(cipher: any FuturaeKit.Cipher) throws -> Foundation.Data
  public func decrypt(cipher: any FuturaeKit.Cipher) throws -> Foundation.Data
  public func authenticate(with authenticator: any FuturaeKit.Authenticator) throws -> Foundation.Data
}
extension Foundation.Data {
  public init(hex: Swift.String)
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func toHexString() -> Swift.String
}
public struct Encrypter<KeyType> {
  public init?(keyManagementAlgorithm: FuturaeKit.KeyManagementAlgorithm, contentEncryptionAlgorithm: FuturaeKit.ContentEncryptionAlgorithm, encryptionKey: KeyType)
}
extension FuturaeKit.Encrypter {
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:encryptionKey:)` instead")
  public init?(keyEncryptionAlgorithm: FuturaeKit.AsymmetricKeyAlgorithm, encryptionKey key: KeyType, contentEncyptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm)
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:encryptionKey:)` instead")
  public init?(keyEncryptionAlgorithm: FuturaeKit.AsymmetricKeyAlgorithm, keyEncryptionKey kek: KeyType, contentEncyptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm)
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct EncryptionContext {
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct SymmetricEncryptionContext {
}
extension FuturaeKit.CS.BigUInt {
  public init?<S>(_ text: S, radix: Swift.Int = 10) where S : Swift.StringProtocol
}
extension FuturaeKit.CS.BigInt {
  public init?<S>(_ text: S, radix: Swift.Int = 10) where S : Swift.StringProtocol
}
extension Swift.String {
  public init(_ v: FuturaeKit.CS.BigUInt)
  public init(_ v: FuturaeKit.CS.BigUInt, radix: Swift.Int, uppercase: Swift.Bool = false)
  public init(_ value: FuturaeKit.CS.BigInt, radix: Swift.Int = 10, uppercase: Swift.Bool = false)
}
extension FuturaeKit.CS.BigUInt : Swift.ExpressibleByStringLiteral {
  public init(unicodeScalarLiteral value: Swift.UnicodeScalar)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.UnicodeScalar
}
extension FuturaeKit.CS.BigInt : Swift.ExpressibleByStringLiteral {
  public init(unicodeScalarLiteral value: Swift.UnicodeScalar)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.UnicodeScalar
}
extension FuturaeKit.CS.BigUInt : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FuturaeKit.CS.BigInt : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FuturaeKit.CS.BigUInt : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
extension FuturaeKit.CS.BigInt : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
public struct OFB : FuturaeKit.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: FuturaeKit.OFB.Error, b: FuturaeKit.OFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
public enum SecureRandomError : Swift.Error {
  case failed(status: Darwin.OSStatus)
  case countMustBeGreaterThanZero
}
public struct SecureRandom {
  public static func generate(count: Swift.Int) throws -> Foundation.Data
}
public enum CipherError : Swift.Error {
  case encrypt
  case decrypt
  public static func == (a: FuturaeKit.CipherError, b: FuturaeKit.CipherError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Cipher : AnyObject {
  var keySize: Swift.Int { get }
  func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension FuturaeKit.Cipher {
  public func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
final public class RSA {
  public enum Error : Swift.Error {
    case noPrivateKey
    case invalidInverseNotCoprimes
    case unsupportedRSAVersion
    case invalidPrimes
    case noPrimes
    case unableToCalculateCoefficient
    case invalidSignatureLength
    case invalidMessageLengthForSigning
    case invalidMessageLengthForEncryption
    case invalidDecryption
    public static func == (a: FuturaeKit.RSA.Error, b: FuturaeKit.RSA.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let n: FuturaeKit.BigUInteger
  final public let e: FuturaeKit.BigUInteger
  final public let d: FuturaeKit.BigUInteger?
  final public let keySize: Swift.Int
  final public let keySizeBytes: Swift.Int
  public init(n: FuturaeKit.BigUInteger, e: FuturaeKit.BigUInteger, d: FuturaeKit.BigUInteger? = nil)
  convenience public init(n: Swift.Array<Swift.UInt8>, e: Swift.Array<Swift.UInt8>, d: Swift.Array<Swift.UInt8>? = nil)
  convenience public init(keySize: Swift.Int) throws
  public init(n: FuturaeKit.BigUInteger, e: FuturaeKit.BigUInteger, d: FuturaeKit.BigUInteger, p: FuturaeKit.BigUInteger, q: FuturaeKit.BigUInteger) throws
  @objc deinit
}
extension FuturaeKit.RSA {
  convenience public init(rawRepresentation raw: Foundation.Data) throws
}
extension FuturaeKit.RSA {
  final public func externalRepresentation() throws -> Foundation.Data
  final public func publicKeyExternalRepresentation() throws -> Foundation.Data
}
extension FuturaeKit.CS.BigUInt {
  public static func generatePrime(_ width: Swift.Int) -> FuturaeKit.BigUInteger
}
extension FuturaeKit.RSA : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers final public class CBCMAC : FuturaeKit.CMAC {
  override final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  override public init(key: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension FuturaeKit.JWKSet : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.JWKSet : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Data : FuturaeKit.ExpressibleAsECPrivateKeyComponents {
  public static func representing(ecPrivateKeyComponents components: FuturaeKit.ECPrivateKeyComponents) throws -> Foundation.Data
  public func ecPrivateKeyComponents() throws -> FuturaeKit.ECPrivateKeyComponents
}
public struct Verifier {
  public init?<KeyType>(verifyingAlgorithm: FuturaeKit.SignatureAlgorithm, publicKey: KeyType)
}
final public class OCB : FuturaeKit.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: FuturaeKit.OCB.Mode, b: FuturaeKit.OCB.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: FuturaeKit.BlockModeOption
  public enum Error : Swift.Error {
    case invalidNonce
    case fail
    public static func == (a: FuturaeKit.OCB.Error, b: FuturaeKit.OCB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(nonce N: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: FuturaeKit.OCB.Mode = .detached)
  @inlinable convenience public init(nonce N: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: FuturaeKit.OCB.Mode = .detached) {
    self.init(nonce: N, additionalAuthenticatedData: additionalAuthenticatedData, tagLength: authenticationTag.count, mode: mode)
    self.authenticationTag = authenticationTag
  }
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
  @objc deinit
}
extension FuturaeKit.CS.BigUInt {
  public static func >>= <Other>(lhs: inout FuturaeKit.CS.BigUInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func <<= <Other>(lhs: inout FuturaeKit.CS.BigUInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func >> <Other>(lhs: FuturaeKit.CS.BigUInt, rhs: Other) -> FuturaeKit.CS.BigUInt where Other : Swift.BinaryInteger
  public static func << <Other>(lhs: FuturaeKit.CS.BigUInt, rhs: Other) -> FuturaeKit.CS.BigUInt where Other : Swift.BinaryInteger
}
extension FuturaeKit.CS.BigInt {
  public static func &<< (left: FuturaeKit.CS.BigInt, right: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func &<<= (left: inout FuturaeKit.CS.BigInt, right: FuturaeKit.CS.BigInt)
  public static func &>> (left: FuturaeKit.CS.BigInt, right: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func &>>= (left: inout FuturaeKit.CS.BigInt, right: FuturaeKit.CS.BigInt)
  public static func << <Other>(lhs: FuturaeKit.CS.BigInt, rhs: Other) -> FuturaeKit.CS.BigInt where Other : Swift.BinaryInteger
  public static func <<= <Other>(lhs: inout FuturaeKit.CS.BigInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func >> <Other>(lhs: FuturaeKit.CS.BigInt, rhs: Other) -> FuturaeKit.CS.BigInt where Other : Swift.BinaryInteger
  public static func >>= <Other>(lhs: inout FuturaeKit.CS.BigInt, rhs: Other) where Other : Swift.BinaryInteger
}
extension FuturaeKit.ECPublicKey : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.ECPublicKey : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension FuturaeKit.ECPrivateKey : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.ECPrivateKey : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  @objc deinit
}
public protocol CompactSerializable {
  func serialize(to serializer: inout any FuturaeKit.CompactSerializer)
}
public protocol CompactSerializer {
  var components: [any FuturaeKit.DataConvertible] { get }
  mutating func serialize<T>(_ object: T) where T : FuturaeKit.DataConvertible
}
public struct JOSESerializer {
  public func serialize<T>(compact object: T) -> Swift.String where T : FuturaeKit.CompactSerializable
}
public enum ECCurveType : Swift.String, Swift.Codable {
  case P256
  case P384
  case P521
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ECCompression : Swift.UInt8 {
  case CompressedYEven
  case CompressedYOdd
  case Uncompressed
  case HybridYEven
  case HybridYOdd
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum JWKParameter : Swift.String, Swift.CodingKey {
  case keyType
  case keyUse
  case keyOperations
  case algorithm
  case keyIdentifier
  case X509URL
  case X509CertificateChain
  case X509CertificateSHA1Thumbprint
  case X509CertificateSHA256Thumbprint
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum RSAParameter : Swift.String, Swift.CodingKey {
  case modulus
  case exponent
  case privateExponent
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum SymmetricKeyParameter : Swift.String, Swift.CodingKey {
  case key
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum ECParameter : Swift.String, Swift.CodingKey {
  case curve
  case x
  case y
  case privateKey
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public struct CFB : FuturaeKit.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: FuturaeKit.CFB.Error, b: FuturaeKit.CFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SegmentSize : Swift.Int {
    case cfb8
    case cfb128
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let options: FuturaeKit.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, segmentSize: FuturaeKit.CFB.SegmentSize = .cfb128)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
}
extension FuturaeKit.JWK {
  public subscript(parameter: Swift.String) -> Swift.String? {
    get
  }
}
extension FuturaeKit.JWK {
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
}
extension FuturaeKit.Rabbit {
  convenience public init(key: Swift.String) throws
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
final public class SHA2 {
  @usableFromInline
  final internal let variant: FuturaeKit.SHA2.Variant
  @usableFromInline
  final internal let size: Swift.Int
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let digestLength: Swift.Int
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash32: [Swift.UInt32]
  @usableFromInline
  final internal var accumulatedHash64: [Swift.UInt64]
  @frozen public enum Variant : Swift.RawRepresentable {
    case sha224, sha256, sha384, sha512
    public var digestLength: Swift.Int {
      get
    }
    public var blockSize: Swift.Int {
      get
    }
    public typealias RawValue = Swift.Int
    public var rawValue: FuturaeKit.SHA2.Variant.RawValue {
      get
    }
    public init?(rawValue: FuturaeKit.SHA2.Variant.RawValue)
    @usableFromInline
    internal var h: Swift.Array<Swift.UInt64> {
      get
    }
    @usableFromInline
    internal var finalLength: Swift.Int {
      get
    }
  }
  public init(variant: FuturaeKit.SHA2.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process64(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @usableFromInline
  final internal func process32(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt32>)
  @objc deinit
}
extension FuturaeKit.SHA2 : FuturaeKit.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: self.blockSize / 8) // A 64-bit/128-bit representation of b. blockSize fit by accident.

      // Step 1. Append padding
      bitPadding(to: &self.accumulated, blockSize: self.blockSize, allowance: self.blockSize / 8)

      // Step 2. Append Length a 64-bit representation of lengthInBits
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        switch self.variant {
          case .sha224, .sha256:
            self.process32(block: chunk, currentHash: &self.accumulatedHash32)
          case .sha384, .sha512:
            self.process64(block: chunk, currentHash: &self.accumulatedHash64)
          }
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

    // output current hash
    var result = Array<UInt8>(repeating: 0, count: variant.digestLength)
    switch self.variant {
      case .sha224, .sha256:
        var pos = 0
        for idx in 0..<self.accumulatedHash32.count where idx < self.variant.finalLength {
          let h = accumulatedHash32[idx]
          result[pos + 0] = UInt8((h >> 24) & 0xff)
          result[pos + 1] = UInt8((h >> 16) & 0xff)
          result[pos + 2] = UInt8((h >> 8) & 0xff)
          result[pos + 3] = UInt8(h & 0xff)
          pos += 4
        }
      case .sha384, .sha512:
        var pos = 0
        for idx in 0..<self.accumulatedHash64.count where idx < self.variant.finalLength {
          let h = accumulatedHash64[idx]
          result[pos + 0] = UInt8((h >> 56) & 0xff)
          result[pos + 1] = UInt8((h >> 48) & 0xff)
          result[pos + 2] = UInt8((h >> 40) & 0xff)
          result[pos + 3] = UInt8((h >> 32) & 0xff)
          result[pos + 4] = UInt8((h >> 24) & 0xff)
          result[pos + 5] = UInt8((h >> 16) & 0xff)
          result[pos + 6] = UInt8((h >> 8) & 0xff)
          result[pos + 7] = UInt8(h & 0xff)
          pos += 8
        }
    }

    // reset hash value for instance
    if isLast {
      switch self.variant {
        case .sha224, .sha256:
          self.accumulatedHash32 = self.variant.h.lazy.map { UInt32($0) } // FIXME: UInt64 for process64
        case .sha384, .sha512:
          self.accumulatedHash64 = self.variant.h
      }
    }

    return result
  }
}
extension FuturaeKit.CS.BigUInt {
  public func squareRoot() -> FuturaeKit.CS.BigUInt
}
extension FuturaeKit.CS.BigInt {
  public func squareRoot() -> FuturaeKit.CS.BigInt
}
extension Foundation.Data : FuturaeKit.ExpressibleAsRSAPublicKeyComponents {
  public static func representing(rsaPublicKeyComponents components: FuturaeKit.RSAPublicKeyComponents) throws -> Foundation.Data
  public func rsaPublicKeyComponents() throws -> FuturaeKit.RSAPublicKeyComponents
}
@usableFromInline
final internal class BlockEncryptor : FuturaeKit.Cryptor, FuturaeKit.Updatable {
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: FuturaeKit.Padding, _ worker: any FuturaeKit.CipherModeWorker) throws
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
extension Swift.String {
  public func decryptBase64ToString(cipher: any FuturaeKit.Cipher) throws -> Swift.String
  public func decryptBase64(cipher: any FuturaeKit.Cipher) throws -> Swift.Array<Swift.UInt8>
}
public typealias BigInteger = FuturaeKit.CS.BigInt
public typealias BigUInteger = FuturaeKit.CS.BigUInt
public enum CS {
}
extension Foundation.Data : FuturaeKit.ExpressibleAsSymmetricKeyComponents {
  public static func representing(symmetricKeyComponents components: FuturaeKit.SymmetricKeyComponents) throws -> Foundation.Data
  public func symmetricKeyComponents() throws -> FuturaeKit.SymmetricKeyComponents
}
@available(*, renamed: "Digest")
public typealias Hash = FuturaeKit.Digest
public struct Digest {
  public static func md5(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha1(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha224(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha256(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha384(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha512(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha2(_ bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.SHA2.Variant) -> Swift.Array<Swift.UInt8>
  public static func sha3(_ bytes: Swift.Array<Swift.UInt8>, variant: FuturaeKit.SHA3.Variant) -> Swift.Array<Swift.UInt8>
}
public protocol CompactDeserializable {
  static var componentCount: Swift.Int { get }
  init(from deserializer: any FuturaeKit.CompactDeserializer) throws
}
public protocol CompactDeserializer {
  func deserialize<T>(_ type: T.Type, at index: Swift.Int) throws -> T where T : FuturaeKit.DataConvertible
}
public struct JOSEDeserializer {
  public init()
  public func deserialize<T>(_ type: T.Type, fromCompactSerialization compactSerialization: Swift.String) throws -> T where T : FuturaeKit.CompactDeserializable
}
public enum ComponentCompactSerializedIndex {
}
extension FuturaeKit.CS.BigUInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
}
extension FuturaeKit.CS.BigInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
}
extension Swift.BinaryFloatingPoint where Self.RawExponent : Swift.FixedWidthInteger, Self.RawSignificand : Swift.FixedWidthInteger {
  public init(_ value: FuturaeKit.CS.BigInt)
  public init(_ value: FuturaeKit.CS.BigUInt)
}
public enum PKCS5 {
}
final public class AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case dataPaddingRequired
    case invalidData
    public static func == (a: FuturaeKit.AES.Error, b: FuturaeKit.AES.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant : Swift.Int {
    case aes128, aes192, aes256
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @usableFromInline
  final internal let variantNr: Swift.Int
  @usableFromInline
  final internal let variantNb: Swift.Int
  @usableFromInline
  final internal let variantNk: Swift.Int
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  final public let variant: FuturaeKit.AES.Variant
  @usableFromInline
  final internal let blockMode: any FuturaeKit.BlockMode
  @usableFromInline
  final internal let padding: FuturaeKit.Padding
  @usableFromInline
  final internal var expandedKey: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  final internal var expandedKeyInv: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  internal static let T0: [Swift.UInt32]
  @usableFromInline
  internal static let T0_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T1: [Swift.UInt32]
  @usableFromInline
  internal static let T1_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T2: [Swift.UInt32]
  @usableFromInline
  internal static let T2_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T3: [Swift.UInt32]
  @usableFromInline
  internal static let T3_INV: [Swift.UInt32]
  @usableFromInline
  internal static let U1: [Swift.UInt32]
  @usableFromInline
  internal static let U2: [Swift.UInt32]
  @usableFromInline
  internal static let U3: [Swift.UInt32]
  @usableFromInline
  internal static let U4: [Swift.UInt32]
  public init(key: Swift.Array<Swift.UInt8>, blockMode: any FuturaeKit.BlockMode, padding: FuturaeKit.Padding = .pkcs7) throws
  @inlinable final internal func encrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>? {
    if self.blockMode.options.contains(.paddingRequired) && block.count != AES.blockSize {
      return Array(block)
    }

    let rounds = self.variantNr
    let rk = self.expandedKey

    let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
    let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
    let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
    let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
    var b0 = b00 | b01 | b02 | b03

    let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
    let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
    let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
    let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
    var b1 = b10 | b11 | b12 | b13

    let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
    let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
    let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
    let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
    var b2 = b20 | b21 | b22 | b23

    let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
    let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
    let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
    let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
    var b3 = b30 | b31 | b32 | b33

    let tLength = 4
    let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
    t.initialize(repeating: 0, count: tLength)
    defer {
      t.deinitialize(count: tLength)
      t.deallocate()
    }

    for r in 0..<rounds - 1 {
      t[0] = b0 ^ rk[r][0]
      t[1] = b1 ^ rk[r][1]
      t[2] = b2 ^ rk[r][2]
      t[3] = b3 ^ rk[r][3]

      let lb00 = AES.T0[Int(t[0] & 0xff)]
      let lb01 = AES.T1[Int((t[1] >> 8) & 0xff)]
      let lb02 = AES.T2[Int((t[2] >> 16) & 0xff)]
      let lb03 = AES.T3[Int(t[3] >> 24)]
      b0 = lb00 ^ lb01 ^ lb02 ^ lb03

      let lb10 = AES.T0[Int(t[1] & 0xff)]
      let lb11 = AES.T1[Int((t[2] >> 8) & 0xff)]
      let lb12 = AES.T2[Int((t[3] >> 16) & 0xff)]
      let lb13 = AES.T3[Int(t[0] >> 24)]
      b1 = lb10 ^ lb11 ^ lb12 ^ lb13

      let lb20 = AES.T0[Int(t[2] & 0xff)]
      let lb21 = AES.T1[Int((t[3] >> 8) & 0xff)]
      let lb22 = AES.T2[Int((t[0] >> 16) & 0xff)]
      let lb23 = AES.T3[Int(t[1] >> 24)]
      b2 = lb20 ^ lb21 ^ lb22 ^ lb23

      let lb30 = AES.T0[Int(t[3] & 0xff)]
      let lb31 = AES.T1[Int((t[0] >> 8) & 0xff)]
      let lb32 = AES.T2[Int((t[1] >> 16) & 0xff)]
      let lb33 = AES.T3[Int(t[2] >> 24)]
      b3 = lb30 ^ lb31 ^ lb32 ^ lb33
    }

    // last round
    let r = rounds - 1

    t[0] = b0 ^ rk[r][0]
    t[1] = b1 ^ rk[r][1]
    t[2] = b2 ^ rk[r][2]
    t[3] = b3 ^ rk[r][3]

    // rounds
    b0 = F1(t[0], t[1], t[2], t[3]) ^ rk[rounds][0]
    b1 = F1(t[1], t[2], t[3], t[0]) ^ rk[rounds][1]
    b2 = F1(t[2], t[3], t[0], t[1]) ^ rk[rounds][2]
    b3 = F1(t[3], t[0], t[1], t[2]) ^ rk[rounds][3]

    let encrypted: Array<UInt8> = [
      UInt8(b0 & 0xff), UInt8((b0 >> 8) & 0xff), UInt8((b0 >> 16) & 0xff), UInt8((b0 >> 24) & 0xff),
      UInt8(b1 & 0xff), UInt8((b1 >> 8) & 0xff), UInt8((b1 >> 16) & 0xff), UInt8((b1 >> 24) & 0xff),
      UInt8(b2 & 0xff), UInt8((b2 >> 8) & 0xff), UInt8((b2 >> 16) & 0xff), UInt8((b2 >> 24) & 0xff),
      UInt8(b3 & 0xff), UInt8((b3 >> 8) & 0xff), UInt8((b3 >> 16) & 0xff), UInt8((b3 >> 24) & 0xff)
    ]
    return encrypted
  }
  @usableFromInline
  final internal func decrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
  @objc deinit
}
extension FuturaeKit.AES {
  @usableFromInline
  @inline(__always) final internal func F1(_ x0: Swift.UInt32, _ x1: Swift.UInt32, _ x2: Swift.UInt32, _ x3: Swift.UInt32) -> Swift.UInt32
}
extension FuturaeKit.AES : FuturaeKit.Cipher {
  @inlinable final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    let blockSize = self.blockMode.customBlockSize ?? AES.blockSize
    let chunks = bytes.batched(by: blockSize)

    var oneTimeCryptor = try makeEncryptor()
    var out = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in chunks {
      out += try oneTimeCryptor.update(withBytes: chunk, isLast: false)
    }
    // Padding may be added at the very end
    out += try oneTimeCryptor.finish()

    if self.blockMode.options.contains(.paddingRequired) && (out.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    return out
  }
  @inlinable final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    if self.blockMode.options.contains(.paddingRequired) && (bytes.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    var oneTimeCryptor = try makeDecryptor()
    let chunks = bytes.batched(by: AES.blockSize)
    if chunks.isEmpty {
      throw Error.invalidData
    }

    var out = Array<UInt8>(reserveCapacity: bytes.count)

    var lastIdx = chunks.startIndex
    chunks.indices.formIndex(&lastIdx, offsetBy: chunks.count - 1)

    // To properly remove padding, `isLast` has to be known when called with the last chunk of ciphertext
    // Last chunk of ciphertext may contains padded data so next call to update(..) won't be able to remove it
    for idx in chunks.indices {
      out += try oneTimeCryptor.update(withBytes: chunks[idx], isLast: idx == lastIdx)
    }
    return out
  }
}
public struct Signer<KeyType> {
  public init?(signingAlgorithm: FuturaeKit.SignatureAlgorithm, privateKey: KeyType)
}
public typealias ECPublicKeyComponents = (crv: Swift.String, x: Foundation.Data, y: Foundation.Data)
public typealias ECPrivateKeyComponents = (crv: Swift.String, x: Foundation.Data, y: Foundation.Data, d: Foundation.Data)
public protocol ExpressibleAsECPublicKeyComponents {
  static func representing(ecPublicKeyComponents components: FuturaeKit.ECPublicKeyComponents) throws -> Self
  func ecPublicKeyComponents() throws -> FuturaeKit.ECPublicKeyComponents
}
public protocol ExpressibleAsECPrivateKeyComponents {
  static func representing(ecPrivateKeyComponents components: FuturaeKit.ECPrivateKeyComponents) throws -> Self
  func ecPrivateKeyComponents() throws -> FuturaeKit.ECPrivateKeyComponents
}
public struct ECPublicKey : FuturaeKit.JWK {
  public let keyType: FuturaeKit.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let crv: FuturaeKit.ECCurveType
  public let x: Swift.String
  public let y: Swift.String
  public init(crv: FuturaeKit.ECCurveType, x: Swift.String, y: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(publicKey: any FuturaeKit.ExpressibleAsECPublicKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : FuturaeKit.ExpressibleAsECPublicKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> FuturaeKit.ECPublicKey
}
public struct ECPrivateKey : FuturaeKit.JWK {
  public let keyType: FuturaeKit.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let crv: FuturaeKit.ECCurveType
  public let x: Swift.String
  public let y: Swift.String
  public let privateKey: Swift.String
  public init(crv: Swift.String, x: Swift.String, y: Swift.String, privateKey: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(privateKey: any FuturaeKit.ExpressibleAsECPrivateKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : FuturaeKit.ExpressibleAsECPrivateKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> FuturaeKit.ECPrivateKey
}
public typealias ECKeyPair = FuturaeKit.ECPrivateKey
@_hasMissingDesignatedInitializers open class SwKeyStore {
  public enum SecError : Darwin.OSStatus, Swift.Error {
    case unimplemented
    case param
    case allocate
    case notAvailable
    case authFailed
    case duplicateItem
    case itemNotFound
    case interactionNotAllowed
    case decode
    case missingEntitlement
    public static var debugLevel: Swift.Int
    public init?(rawValue: Darwin.OSStatus)
    public typealias RawValue = Darwin.OSStatus
    public var rawValue: Darwin.OSStatus {
      get
    }
  }
  public static func upsertKey(_ pemKey: Swift.String, keyTag: Swift.String, options: [Foundation.NSString : Swift.AnyObject] = [:]) throws
  public static func getKey(_ keyTag: Swift.String) throws -> Swift.String
  public static func delKey(_ keyTag: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwKeyConvert {
  public enum SwError : Swift.Error {
    case invalidKey
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
    public static func == (a: FuturaeKit.SwKeyConvert.SwError, b: FuturaeKit.SwKeyConvert.SwError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public typealias EncMode = FuturaeKit.PEM.EncryptedPrivateKey.EncMode
    public static func encryptPEM(_ pemKey: Swift.String, passphrase: Swift.String, mode: FuturaeKit.SwKeyConvert.PrivateKey.EncMode) throws -> Swift.String
    public static func decryptPEM(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func pemToPKCS8DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public static func derToPKCS8PEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PKCS8 {
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func addHeader(_ derKey: Foundation.Data) -> Foundation.Data
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PEM {
  public enum SwError : Swift.Error {
    case parse(Swift.String)
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EncryptedPrivateKey {
    public enum EncMode {
      case aes128CBC, aes256CBC
      public static func == (a: FuturaeKit.PEM.EncryptedPrivateKey.EncMode, b: FuturaeKit.PEM.EncryptedPrivateKey.EncMode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func toDER(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data, passphrase: Swift.String, mode: FuturaeKit.PEM.EncryptedPrivateKey.EncMode) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CC {
  public typealias CCCryptorStatus = Swift.Int32
  public enum CCError : FuturaeKit.CC.CCCryptorStatus, Swift.Error {
    case paramError
    case bufferTooSmall
    case memoryFailure
    case alignmentError
    case decodeError
    case unimplemented
    case overflow
    case rngFailure
    case unspecifiedError
    case callSequenceError
    case keySizeError
    case invalidKey
    public static var debugLevel: Swift.Int
    public init?(rawValue: FuturaeKit.CC.CCCryptorStatus)
    public typealias RawValue = FuturaeKit.CC.CCCryptorStatus
    public var rawValue: FuturaeKit.CC.CCCryptorStatus {
      get
    }
  }
  public static func generateRandom(_ size: Swift.Int) -> Foundation.Data
  public typealias CCDigestAlgorithm = Swift.UInt32
  public enum DigestAlgorithm : FuturaeKit.CC.CCDigestAlgorithm {
    case none
    case md5
    case rmd128, rmd160, rmd256, rmd320
    case sha1
    case sha224, sha256, sha384, sha512
    public init?(rawValue: FuturaeKit.CC.CCDigestAlgorithm)
    public typealias RawValue = FuturaeKit.CC.CCDigestAlgorithm
    public var rawValue: FuturaeKit.CC.CCDigestAlgorithm {
      get
    }
  }
  public static func digest(_ data: Foundation.Data, alg: FuturaeKit.CC.DigestAlgorithm) -> Foundation.Data
  public typealias CCHmacAlgorithm = Swift.UInt32
  public enum HMACAlg : FuturaeKit.CC.CCHmacAlgorithm {
    case sha1, md5, sha256, sha384, sha512, sha224
    public init?(rawValue: FuturaeKit.CC.CCHmacAlgorithm)
    public typealias RawValue = FuturaeKit.CC.CCHmacAlgorithm
    public var rawValue: FuturaeKit.CC.CCHmacAlgorithm {
      get
    }
  }
  public static func HMAC(_ data: Foundation.Data, alg: FuturaeKit.CC.HMACAlg, key: Foundation.Data) -> Foundation.Data
  public typealias CCOperation = Swift.UInt32
  public enum OpMode : FuturaeKit.CC.CCOperation {
    case encrypt, decrypt
    public init?(rawValue: FuturaeKit.CC.CCOperation)
    public typealias RawValue = FuturaeKit.CC.CCOperation
    public var rawValue: FuturaeKit.CC.CCOperation {
      get
    }
  }
  public typealias CCMode = Swift.UInt32
  public enum BlockMode : FuturaeKit.CC.CCMode {
    case ecb, cbc, cfb, ctr, f8, lrw, ofb, xts, rc4, cfb8
    public init?(rawValue: FuturaeKit.CC.CCMode)
    public typealias RawValue = FuturaeKit.CC.CCMode
    public var rawValue: FuturaeKit.CC.CCMode {
      get
    }
  }
  public enum AuthBlockMode : FuturaeKit.CC.CCMode {
    case gcm, ccm
    public init?(rawValue: FuturaeKit.CC.CCMode)
    public typealias RawValue = FuturaeKit.CC.CCMode
    public var rawValue: FuturaeKit.CC.CCMode {
      get
    }
  }
  public typealias CCAlgorithm = Swift.UInt32
  public enum Algorithm : FuturaeKit.CC.CCAlgorithm {
    case aes, des, threeDES, cast, rc4, rc2, blowfish
    public init?(rawValue: FuturaeKit.CC.CCAlgorithm)
    public typealias RawValue = FuturaeKit.CC.CCAlgorithm
    public var rawValue: FuturaeKit.CC.CCAlgorithm {
      get
    }
  }
  public typealias CCPadding = Swift.UInt32
  public enum Padding : FuturaeKit.CC.CCPadding {
    case noPadding, pkcs7Padding
    public init?(rawValue: FuturaeKit.CC.CCPadding)
    public typealias RawValue = FuturaeKit.CC.CCPadding
    public var rawValue: FuturaeKit.CC.CCPadding {
      get
    }
  }
  public static func crypt(_ opMode: FuturaeKit.CC.OpMode, blockMode: FuturaeKit.CC.BlockMode, algorithm: FuturaeKit.CC.Algorithm, padding: FuturaeKit.CC.Padding, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func cryptAuth(_ opMode: FuturaeKit.CC.OpMode, blockMode: FuturaeKit.CC.AuthBlockMode, algorithm: FuturaeKit.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func encryptAuth(blockMode: FuturaeKit.CC.AuthBlockMode, algorithm: FuturaeKit.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
  public static func decryptAuth(blockMode: FuturaeKit.CC.AuthBlockMode, algorithm: FuturaeKit.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func digestAvailable() -> Swift.Bool
  public static func randomAvailable() -> Swift.Bool
  public static func hmacAvailable() -> Swift.Bool
  public static func cryptorAvailable() -> Swift.Bool
  public static func available() -> Swift.Bool
  @_hasMissingDesignatedInitializers open class GCM {
    public static func crypt(_ opMode: FuturaeKit.CC.OpMode, algorithm: FuturaeKit.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CCM {
    public static func crypt(_ opMode: FuturaeKit.CC.OpMode, algorithm: FuturaeKit.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class RSA {
    public typealias CCAsymmetricPadding = Swift.UInt32
    public enum AsymmetricPadding : FuturaeKit.CC.RSA.CCAsymmetricPadding {
      case pkcs1
      case oaep
      public init?(rawValue: FuturaeKit.CC.RSA.CCAsymmetricPadding)
      public typealias RawValue = FuturaeKit.CC.RSA.CCAsymmetricPadding
      public var rawValue: FuturaeKit.CC.RSA.CCAsymmetricPadding {
        get
      }
    }
    public enum AsymmetricSAPadding : Swift.UInt32 {
      case pkcs15
      case pss
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func generateKeyPair(_ keySize: Swift.Int = 4096) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ derKey: Foundation.Data) throws -> Foundation.Data
    public static func encrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: FuturaeKit.CC.RSA.AsymmetricPadding, digest: FuturaeKit.CC.DigestAlgorithm) throws -> Foundation.Data
    public static func decrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: FuturaeKit.CC.RSA.AsymmetricPadding, digest: FuturaeKit.CC.DigestAlgorithm) throws -> (Foundation.Data, Swift.Int)
    public static func sign(_ message: Foundation.Data, derKey: Foundation.Data, padding: FuturaeKit.CC.RSA.AsymmetricSAPadding, digest: FuturaeKit.CC.DigestAlgorithm, saltLen: Swift.Int) throws -> Foundation.Data
    public static func verify(_ message: Foundation.Data, derKey: Foundation.Data, padding: FuturaeKit.CC.RSA.AsymmetricSAPadding, digest: FuturaeKit.CC.DigestAlgorithm, saltLen: Swift.Int, signedData: Foundation.Data) throws -> Swift.Bool
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class DH {
    public enum DHParam {
      case rfc3526Group5
      case rfc2409Group2
      public static func == (a: FuturaeKit.CC.DH.DHParam, b: FuturaeKit.CC.DH.DHParam) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    open class DH {
      public init(dhParam: FuturaeKit.CC.DH.DHParam) throws
      open func generateKey() throws -> Foundation.Data
      open func computeKey(_ peerKey: Foundation.Data) throws -> Foundation.Data
      @objc deinit
    }
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EC {
    public static func generateKeyPair(_ keySize: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ privateKey: Foundation.Data) throws -> Foundation.Data
    public static func signHash(_ privateKey: Foundation.Data, hash: Foundation.Data) throws -> Foundation.Data
    public static func verifyHash(_ publicKey: Foundation.Data, hash: Foundation.Data, signedData: Foundation.Data) throws -> Swift.Bool
    public static func computeSharedSecret(_ privateKey: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
    public struct KeyComponents {
      public init(_ keySize: Swift.Int, _ x: Foundation.Data, _ y: Foundation.Data, _ d: Foundation.Data)
      public var keySize: Swift.Int
      public var x: Foundation.Data
      public var y: Foundation.Data
      public var d: Foundation.Data
    }
    public static func getPublicKeyComponents(_ keyData: Foundation.Data) throws -> FuturaeKit.CC.EC.KeyComponents
    public static func getPrivateKeyComponents(_ keyData: Foundation.Data) throws -> FuturaeKit.CC.EC.KeyComponents
    public static func createFromData(_ keySize: Darwin.size_t, _ x: Foundation.Data, _ y: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CRC {
    public typealias CNcrc = Swift.UInt32
    public enum Mode : FuturaeKit.CC.CRC.CNcrc {
      case crc8, crc8ICODE, crc8ITU, crc8ROHC, crc8WCDMA, crc16, crc16CCITTTrue, crc16CCITTFalse, crc16USB, crc16XMODEM, crc16DECTR, crc16DECTX, crc16ICODE, crc16VERIFONE, crc16A, crc16B, crc16Fletcher, crc32Adler, crc32, crc32CASTAGNOLI, crc32BZIP2, crc32MPEG2, crc32POSIX, crc32XFER, crc64ECMA182
      public init?(rawValue: FuturaeKit.CC.CRC.CNcrc)
      public typealias RawValue = FuturaeKit.CC.CRC.CNcrc
      public var rawValue: FuturaeKit.CC.CRC.CNcrc {
        get
      }
    }
    public static func crc(_ input: Foundation.Data, mode: FuturaeKit.CC.CRC.Mode) throws -> Swift.UInt64
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CMAC {
    public static func AESCMAC(_ data: Foundation.Data, key: Foundation.Data) -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyDerivation {
    public typealias CCPseudoRandomAlgorithm = Swift.UInt32
    public enum PRFAlg : FuturaeKit.CC.KeyDerivation.CCPseudoRandomAlgorithm {
      case sha1, sha224, sha256, sha384, sha512
      public init?(rawValue: FuturaeKit.CC.KeyDerivation.CCPseudoRandomAlgorithm)
      public typealias RawValue = FuturaeKit.CC.KeyDerivation.CCPseudoRandomAlgorithm
      public var rawValue: FuturaeKit.CC.KeyDerivation.CCPseudoRandomAlgorithm {
        get
      }
    }
    public static func PBKDF2(_ password: Swift.String, salt: Foundation.Data, prf: FuturaeKit.CC.KeyDerivation.PRFAlg, rounds: Swift.UInt32) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyWrap {
    public static let rfc3394IV: Foundation.Data
    public static func SymmetricKeyWrap(_ iv: Foundation.Data, kek: Foundation.Data, rawKey: Foundation.Data) throws -> Foundation.Data
    public static func SymmetricKeyUnwrap(_ iv: Foundation.Data, kek: Foundation.Data, wrappedKey: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension Foundation.Data {
  public func hexadecimalString() -> Swift.String
  public func arrayOfBytes() -> [Swift.UInt8]
}
extension Swift.String {
  public func dataFromHexadecimalString() -> Foundation.Data?
}
public protocol Authenticator {
  func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
public typealias SymmetricKeyComponents = (Foundation.Data)
public protocol ExpressibleAsSymmetricKeyComponents {
  static func representing(symmetricKeyComponents components: FuturaeKit.SymmetricKeyComponents) throws -> Self
  func symmetricKeyComponents() throws -> FuturaeKit.SymmetricKeyComponents
}
public struct SymmetricKey : FuturaeKit.JWK {
  public let keyType: FuturaeKit.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let key: Swift.String
  public init(key: Foundation.Data, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(key: any FuturaeKit.ExpressibleAsSymmetricKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : FuturaeKit.ExpressibleAsSymmetricKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> FuturaeKit.SymmetricKey
}
extension FuturaeKit.CS.BigUInt {
  public func power(_ exponent: Swift.Int) -> FuturaeKit.CS.BigUInt
  public func power(_ exponent: FuturaeKit.CS.BigUInt, modulus: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
}
extension FuturaeKit.CS.BigInt {
  public func power(_ exponent: Swift.Int) -> FuturaeKit.CS.BigInt
  public func power(_ exponent: FuturaeKit.CS.BigInt, modulus: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
}
extension FuturaeKit.SymmetricKey : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FuturaeKit.SymmetricKey : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct Payload : FuturaeKit.DataConvertible {
  public init(_ payload: Foundation.Data)
  public func data() -> Foundation.Data
}
public typealias RSAPublicKeyComponents = (modulus: Foundation.Data, exponent: Foundation.Data)
public typealias RSAPrivateKeyComponents = (modulus: Foundation.Data, exponent: Foundation.Data, privateExponent: Foundation.Data)
public protocol ExpressibleAsRSAPublicKeyComponents {
  static func representing(rsaPublicKeyComponents components: FuturaeKit.RSAPublicKeyComponents) throws -> Self
  func rsaPublicKeyComponents() throws -> FuturaeKit.RSAPublicKeyComponents
}
public protocol ExpressibleAsRSAPrivateKeyComponents {
  static func representing(rsaPrivateKeyComponents components: FuturaeKit.RSAPrivateKeyComponents) throws -> Self
  func rsaPrivateKeyComponents() throws -> FuturaeKit.RSAPrivateKeyComponents
}
public struct RSAPublicKey : FuturaeKit.JWK {
  public let keyType: FuturaeKit.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let modulus: Swift.String
  public let exponent: Swift.String
  public init(modulus: Swift.String, exponent: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(publicKey: any FuturaeKit.ExpressibleAsRSAPublicKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : FuturaeKit.ExpressibleAsRSAPublicKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> FuturaeKit.RSAPublicKey
}
public struct RSAPrivateKey : FuturaeKit.JWK {
  public let keyType: FuturaeKit.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let modulus: Swift.String
  public let exponent: Swift.String
  public let privateExponent: Swift.String
  public init(modulus: Swift.String, exponent: Swift.String, privateExponent: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(privateKey: any FuturaeKit.ExpressibleAsRSAPrivateKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : FuturaeKit.ExpressibleAsRSAPrivateKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: FuturaeKit.JWKThumbprintAlgorithm = .SHA256) throws -> FuturaeKit.RSAPrivateKey
}
public typealias RSAKeyPair = FuturaeKit.RSAPrivateKey
public protocol CipherModeWorker {
  var cipherOperation: FuturaeKit.CipherOperationOnBlock { get }
  var additionalBufferSize: Swift.Int { get }
  @inlinable mutating func encrypt(block plaintext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @inlinable mutating func decrypt(block ciphertext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
}
public protocol BlockModeWorker : FuturaeKit.CipherModeWorker {
  var blockSize: Swift.Int { get }
}
public protocol CounterModeWorker : FuturaeKit.CipherModeWorker {
  associatedtype Counter
  var counter: Self.Counter { get set }
}
public protocol SeekableModeWorker : FuturaeKit.CipherModeWorker {
  mutating func seek(to position: Swift.Int) throws
}
public protocol StreamModeWorker : FuturaeKit.CipherModeWorker {
}
public protocol FinalizingEncryptModeWorker : FuturaeKit.CipherModeWorker {
  mutating func finalize(encrypt ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
public protocol FinalizingDecryptModeWorker : FuturaeKit.CipherModeWorker {
  @discardableResult
  mutating func willDecryptLast(bytes ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func didDecryptLast(bytes plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func finalize(decrypt plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
public struct JWEHeader {
  public init(keyManagementAlgorithm: FuturaeKit.KeyManagementAlgorithm, contentEncryptionAlgorithm: FuturaeKit.ContentEncryptionAlgorithm)
  public init(parameters: [Swift.String : Any]) throws
}
extension FuturaeKit.JWEHeader {
  public var keyManagementAlgorithm: FuturaeKit.KeyManagementAlgorithm? {
    get
  }
  public var contentEncryptionAlgorithm: FuturaeKit.ContentEncryptionAlgorithm? {
    get
  }
  public var compressionAlgorithm: FuturaeKit.CompressionAlgorithm? {
    get
  }
  public var zip: Swift.String? {
    get
    set
  }
}
extension FuturaeKit.JWEHeader : FuturaeKit.CommonHeaderParameterSpace {
  public var jku: Foundation.URL? {
    get
    set
  }
  public var jwk: Swift.String? {
    get
    set
  }
  public var jwkTyped: (any FuturaeKit.JWK)? {
    get
    set
  }
  public var kid: Swift.String? {
    get
    set
  }
  public var x5u: Foundation.URL? {
    get
    set
  }
  public var x5c: [Swift.String]? {
    get
    set
  }
  public var x5t: Swift.String? {
    get
    set
  }
  public var x5tS256: Swift.String? {
    get
    set
  }
  public var typ: Swift.String? {
    get
    set
  }
  public var cty: Swift.String? {
    get
    set
  }
  public var crit: [Swift.String]? {
    get
    set
  }
}
extension FuturaeKit.JWEHeader {
  @available(*, deprecated, message: "Use `JWEHeader.keyManagementAlgorithm` instead")
  public var algorithm: FuturaeKit.AsymmetricKeyAlgorithm? {
    get
  }
  @available(*, deprecated, message: "Use `JWEHeader.contentEncryptionAlgorithm` instead")
  public var encryptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm? {
    get
  }
  @available(*, deprecated, message: "Use `init(keyManagementAlgorithm:contentEncryptionAlgorithm` instead")
  public init(algorithm: FuturaeKit.AsymmetricKeyAlgorithm, encryptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm)
}
public protocol PaddingProtocol {
  func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
}
public enum Padding : FuturaeKit.PaddingProtocol {
  case noPadding, zeroPadding, pkcs7, pkcs5, eme_pkcs1v15, emsa_pkcs1v15, iso78164, iso10126
  public func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  public func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
  public static func == (a: FuturaeKit.Padding, b: FuturaeKit.Padding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FuturaeKit.CS.BigUInt : Swift.Comparable {
  public static func compare(_ a: FuturaeKit.CS.BigUInt, _ b: FuturaeKit.CS.BigUInt) -> Foundation.ComparisonResult
  public static func == (a: FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt) -> Swift.Bool
  public static func < (a: FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt) -> Swift.Bool
}
extension FuturaeKit.CS.BigInt {
  public static func == (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> Swift.Bool
  public static func < (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> Swift.Bool
}
public struct Decrypter {
  public init?<KeyType>(keyManagementAlgorithm: FuturaeKit.KeyManagementAlgorithm, contentEncryptionAlgorithm: FuturaeKit.ContentEncryptionAlgorithm, decryptionKey: KeyType)
}
extension FuturaeKit.Decrypter {
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:decryptionKey:)` instead")
  public init?<KeyType>(keyDecryptionAlgorithm: FuturaeKit.AsymmetricKeyAlgorithm, decryptionKey key: KeyType, contentDecryptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm)
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:decryptionKey:)` instead")
  public init?<KeyType>(keyDecryptionAlgorithm: FuturaeKit.AsymmetricKeyAlgorithm, keyDecryptionKey kdk: KeyType, contentDecryptionAlgorithm: FuturaeKit.SymmetricKeyAlgorithm)
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct DecryptionContext {
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct SymmetricDecryptionContext {
}
public struct JWE {
  public let header: FuturaeKit.JWEHeader
  public let encryptedKey: Foundation.Data
  public let initializationVector: Foundation.Data
  public let ciphertext: Foundation.Data
  public let authenticationTag: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public init<KeyType>(header: FuturaeKit.JWEHeader, payload: FuturaeKit.Payload, encrypter: FuturaeKit.Encrypter<KeyType>) throws
  public init(compactSerialization: Swift.String) throws
  public init(compactSerialization: Foundation.Data) throws
  @available(*, deprecated, message: "Use `decrypt(using decrypter:)` instead")
  public func decrypt<KeyType>(with key: KeyType) throws -> FuturaeKit.Payload
  public func decrypt(using decrypter: FuturaeKit.Decrypter) throws -> FuturaeKit.Payload
}
extension FuturaeKit.JWE : FuturaeKit.CompactSerializable {
  public func serialize(to serializer: inout any FuturaeKit.CompactSerializer)
}
extension FuturaeKit.JWE : FuturaeKit.CompactDeserializable {
  public static var componentCount: Swift.Int {
    get
  }
  public init(from deserializer: any FuturaeKit.CompactDeserializer) throws
}
public class CMAC : FuturaeKit.Authenticator {
  public enum Error : Swift.Error {
    case wrongKeyLength
    public static func == (a: FuturaeKit.CMAC.Error, b: FuturaeKit.CMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>) throws
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>, cipher: any FuturaeKit.Cipher) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
@inlinable internal func rotateLeft(_ value: Swift.UInt8, by: Swift.UInt8) -> Swift.UInt8 {
  ((value << by) & 0xff) | (value >> (8 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  ((value << by) & 0xffff) | (value >> (16 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  ((value << by) & 0xffffffff) | (value >> (32 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  (value << by) | (value >> (64 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  (value >> by) | (value << (16 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  (value >> by) | (value << (32 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  ((value >> by) | (value << (64 - by)))
}
@inlinable internal func reversed(_ uint8: Swift.UInt8) -> Swift.UInt8 {
  var v = uint8
  v = (v & 0xf0) >> 4 | (v & 0x0f) << 4
  v = (v & 0xcc) >> 2 | (v & 0x33) << 2
  v = (v & 0xaa) >> 1 | (v & 0x55) << 1
  return v
}
@inlinable internal func reversed(_ uint32: Swift.UInt32) -> Swift.UInt32 {
  var v = uint32
  v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1)
  v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2)
  v = ((v >> 4) & 0x0f0f0f0f) | ((v & 0x0f0f0f0f) << 4)
  v = ((v >> 8) & 0x00ff00ff) | ((v & 0x00ff00ff) << 8)
  v = ((v >> 16) & 0xffff) | ((v & 0xffff) << 16)
  return v
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.ArraySlice<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  return xor(left, right).slice
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.Array<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  let length = Swift.min(left.count, right.count)

  let buf = UnsafeMutablePointer<UInt8>.allocate(capacity: length)
  buf.initialize(repeating: 0, count: length)
  defer {
    buf.deinitialize(count: length)
    buf.deallocate()
  }

  // xor
  for i in 0..<length {
    buf[i] = left[left.startIndex.advanced(by: i)] ^ right[right.startIndex.advanced(by: i)]
  }

  return Array(UnsafeBufferPointer(start: buf, count: length))
}
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
  // Step 1. Append Padding Bits
  // append one bit (UInt8 with one bit) to message
  data.append(0x80)

  // Step 2. append "0" bit until message length in bits ≡ 448 (mod 512)
  let max = blockSize - allowance // 448, 986
  if msgLength % blockSize < max { // 448
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
extension FuturaeKit.Blowfish {
  convenience public init(key: Swift.String, iv: Swift.String, padding: FuturaeKit.Padding = .pkcs7) throws
}
public protocol _UInt8Type {
}
extension Swift.UInt8 : FuturaeKit._UInt8Type {
}
extension Swift.UInt8 {
  public func bits() -> [FuturaeKit.Bit]
  public func bits() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class DeviceSecurity : ObjectiveC.NSObject {
  @objc public class func jailbreakStatus() -> FuturaeKit.JailbreakStatus
  @objc override dynamic public init()
  @objc deinit
}
extension FuturaeKit.AES {
  convenience public init(key: Swift.String, iv: Swift.String, padding: FuturaeKit.Padding = .pkcs7) throws
}
extension Foundation.Data : FuturaeKit.ExpressibleAsECPublicKeyComponents {
  public static func representing(ecPublicKeyComponents components: FuturaeKit.ECPublicKeyComponents) throws -> Foundation.Data
  public func ecPublicKeyComponents() throws -> FuturaeKit.ECPublicKeyComponents
}
extension FuturaeKit.CS.BigUInt {
  public mutating func subtractReportingOverflow(_ b: FuturaeKit.CS.BigUInt, shiftedBy shift: Swift.Int = 0) -> Swift.Bool
  public func subtractingReportingOverflow(_ other: FuturaeKit.CS.BigUInt, shiftedBy shift: Swift.Int) -> (partialValue: FuturaeKit.CS.BigUInt, overflow: Swift.Bool)
  public func subtractingReportingOverflow(_ other: FuturaeKit.CS.BigUInt) -> (partialValue: FuturaeKit.CS.BigUInt, overflow: Swift.Bool)
  public mutating func subtract(_ other: FuturaeKit.CS.BigUInt, shiftedBy shift: Swift.Int = 0)
  public func subtracting(_ other: FuturaeKit.CS.BigUInt, shiftedBy shift: Swift.Int = 0) -> FuturaeKit.CS.BigUInt
  public mutating func decrement(shiftedBy shift: Swift.Int = 0)
  public static func - (a: FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func -= (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
}
extension FuturaeKit.CS.BigInt {
  public mutating func negate()
  public static func - (a: FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func -= (a: inout FuturaeKit.CS.BigInt, b: FuturaeKit.CS.BigInt)
}
public protocol Cryptors : AnyObject {
  func makeEncryptor() throws -> any FuturaeKit.Cryptor & FuturaeKit.Updatable
  func makeDecryptor() throws -> any FuturaeKit.Cryptor & FuturaeKit.Updatable
  static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension FuturaeKit.Cryptors {
  public static func randomIV(_ count: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension Swift.Array {
  @inlinable internal init(reserveCapacity: Swift.Int) {
    self = Array<Element>()
    self.reserveCapacity(reserveCapacity)
  }
  @inlinable internal var slice: Swift.ArraySlice<Element> {
    get {
    self[self.startIndex ..< self.endIndex]
  }
  }
  @inlinable internal subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get {
    return indices.contains(index) ? self[index] : nil
  }
  }
}
extension Swift.Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension Swift.Array where Element == Swift.UInt8 {
  @available(*, deprecated)
  public func chunks(size chunksize: Swift.Int) -> Swift.Array<Swift.Array<Element>>
  public func md5() -> [Element]
  public func sha1() -> [Element]
  public func sha224() -> [Element]
  public func sha256() -> [Element]
  public func sha384() -> [Element]
  public func sha512() -> [Element]
  public func sha2(_ variant: FuturaeKit.SHA2.Variant) -> [Element]
  public func sha3(_ variant: FuturaeKit.SHA3.Variant) -> [Element]
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.UInt16
  public func encrypt(cipher: any FuturaeKit.Cipher) throws -> [Element]
  public func decrypt(cipher: any FuturaeKit.Cipher) throws -> [Element]
  public func authenticate<A>(with authenticator: A) throws -> [Element] where A : FuturaeKit.Authenticator
}
public typealias CipherOperationOnBlock = (_ block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
public protocol BlockMode {
  var options: FuturaeKit.BlockModeOption { get }
  @inlinable func worker(blockSize: Swift.Int, cipherOperation: @escaping FuturaeKit.CipherOperationOnBlock, encryptionOperation: @escaping FuturaeKit.CipherOperationOnBlock) throws -> any FuturaeKit.CipherModeWorker
  var customBlockSize: Swift.Int? { get }
}
final public class Scrypt {
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, dkLen: Swift.Int, N: Swift.Int, r: Swift.Int, p: Swift.Int) throws
  final public func calculate() throws -> [Swift.UInt8]
  final public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension FuturaeKit.CS.BigUInt {
  prefix public static func ~ (a: FuturaeKit.CS.BigUInt) -> FuturaeKit.CS.BigUInt
  public static func |= (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
  public static func &= (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
  public static func ^= (a: inout FuturaeKit.CS.BigUInt, b: FuturaeKit.CS.BigUInt)
}
extension FuturaeKit.CS.BigInt {
  prefix public static func ~ (x: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func & (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func | (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func ^ (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt) -> FuturaeKit.CS.BigInt
  public static func &= (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt)
  public static func |= (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt)
  public static func ^= (lhs: inout FuturaeKit.CS.BigInt, rhs: FuturaeKit.CS.BigInt)
}
public enum SignatureError : Swift.Error {
  case sign
  case verify
  public static func == (a: FuturaeKit.SignatureError, b: FuturaeKit.SignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Signature : AnyObject {
  var keySize: Swift.Int { get }
  func sign(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func sign(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func verify(signature: Swift.ArraySlice<Swift.UInt8>, for expectedData: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Bool
  func verify(signature: Swift.Array<Swift.UInt8>, for expectedData: Swift.Array<Swift.UInt8>) throws -> Swift.Bool
}
extension FuturaeKit.Signature {
  public func sign(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func verify(signature: Swift.Array<Swift.UInt8>, for expectedData: Swift.Array<Swift.UInt8>) throws -> Swift.Bool
}
public struct JWKSet {
  public let keys: [any FuturaeKit.JWK]
  public init(keys: [any FuturaeKit.JWK])
  public init(data: Foundation.Data) throws
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
}
extension FuturaeKit.JWKSet : Swift.Collection {
  public typealias ArrayType = [any FuturaeKit.JWK]
  public typealias Element = FuturaeKit.JWKSet.ArrayType.Element
  public typealias Index = FuturaeKit.JWKSet.ArrayType.Index
  public typealias Iterator = FuturaeKit.JWKSet.ArrayType.Iterator
  public var startIndex: FuturaeKit.JWKSet.Index {
    get
  }
  public var endIndex: FuturaeKit.JWKSet.Index {
    get
  }
  public subscript(index: FuturaeKit.JWKSet.Index) -> FuturaeKit.JWKSet.Element {
    get
  }
  public func index(after index: FuturaeKit.JWKSet.Index) -> FuturaeKit.JWKSet.Index
  public func makeIterator() -> Swift.IndexingIterator<FuturaeKit.JWKSet.ArrayType>
  public typealias Indices = Swift.DefaultIndices<FuturaeKit.JWKSet>
  public typealias SubSequence = Swift.Slice<FuturaeKit.JWKSet>
}
extension FuturaeKit.JWKSet : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = FuturaeKit.JWKSet.Element
  public init(arrayLiteral elements: FuturaeKit.JWKSet.ArrayLiteralElement...)
}
@_hasMissingDesignatedInitializers final public class AEADChaCha20Poly1305 : FuturaeKit.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
extension FuturaeKit.CS.BigInt.Sign : Swift.Equatable {}
extension FuturaeKit.CS.BigInt.Sign : Swift.Hashable {}
extension FuturaeKit.CCM : FuturaeKit.BlockMode {}
extension FuturaeKit.CCM.Error : Swift.Equatable {}
extension FuturaeKit.CCM.Error : Swift.Hashable {}
extension FuturaeKit.Poly1305.Error : Swift.Equatable {}
extension FuturaeKit.Poly1305.Error : Swift.Hashable {}
extension FuturaeKit.ContentEncryptionAlgorithm : Swift.Equatable {}
extension FuturaeKit.ContentEncryptionAlgorithm : Swift.Hashable {}
extension FuturaeKit.ContentEncryptionAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.KeyManagementAlgorithm : Swift.Equatable {}
extension FuturaeKit.KeyManagementAlgorithm : Swift.Hashable {}
extension FuturaeKit.KeyManagementAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.HKDF.Error : Swift.Equatable {}
extension FuturaeKit.HKDF.Error : Swift.Hashable {}
extension FuturaeKit.Blowfish.Error : Swift.Equatable {}
extension FuturaeKit.Blowfish.Error : Swift.Hashable {}
extension FuturaeKit.JWKThumbprintAlgorithm : Swift.Equatable {}
extension FuturaeKit.JWKThumbprintAlgorithm : Swift.Hashable {}
extension FuturaeKit.JWKThumbprintAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.SHA3.Variant : Swift.Equatable {}
extension FuturaeKit.SHA3.Variant : Swift.Hashable {}
extension FuturaeKit.RSA.SignatureVariant : Swift.Equatable {}
extension FuturaeKit.RSA.SignatureVariant : Swift.Hashable {}
extension FuturaeKit.CTR : FuturaeKit.BlockMode {}
extension FuturaeKit.CTR.Error : Swift.Equatable {}
extension FuturaeKit.CTR.Error : Swift.Hashable {}
extension FuturaeKit.Rabbit.Error : Swift.Equatable {}
extension FuturaeKit.Rabbit.Error : Swift.Hashable {}
extension FuturaeKit.PKCS5.PBKDF2.Error : Swift.Equatable {}
extension FuturaeKit.PKCS5.PBKDF2.Error : Swift.Hashable {}
extension FuturaeKit.JWKKeyType : Swift.Equatable {}
extension FuturaeKit.JWKKeyType : Swift.Hashable {}
extension FuturaeKit.JWKKeyType : Swift.RawRepresentable {}
extension FuturaeKit.PKCS5.PBKDF1.Error : Swift.Equatable {}
extension FuturaeKit.PKCS5.PBKDF1.Error : Swift.Hashable {}
extension FuturaeKit.PKCS5.PBKDF1.Variant : Swift.Equatable {}
extension FuturaeKit.PKCS5.PBKDF1.Variant : Swift.Hashable {}
extension FuturaeKit.FailedCheck : Swift.Equatable {}
extension FuturaeKit.FailedCheck : Swift.Hashable {}
extension FuturaeKit.AppAttestError : Swift.Equatable {}
extension FuturaeKit.AppAttestError : Swift.Hashable {}
extension FuturaeKit.AppAttestError : Swift.RawRepresentable {}
extension FuturaeKit.Bit : Swift.Equatable {}
extension FuturaeKit.Bit : Swift.Hashable {}
extension FuturaeKit.Bit : Swift.RawRepresentable {}
extension FuturaeKit.SignatureAlgorithm : Swift.Equatable {}
extension FuturaeKit.SignatureAlgorithm : Swift.Hashable {}
extension FuturaeKit.SignatureAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.GCM.Mode : Swift.Equatable {}
extension FuturaeKit.GCM.Mode : Swift.Hashable {}
extension FuturaeKit.GCM.Error : Swift.Equatable {}
extension FuturaeKit.GCM.Error : Swift.Hashable {}
extension FuturaeKit.HMACAlgorithm : Swift.Equatable {}
extension FuturaeKit.HMACAlgorithm : Swift.Hashable {}
extension FuturaeKit.HMACAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.CompressionAlgorithm : Swift.Equatable {}
extension FuturaeKit.CompressionAlgorithm : Swift.Hashable {}
extension FuturaeKit.CompressionAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.ChaCha20.Error : Swift.Equatable {}
extension FuturaeKit.ChaCha20.Error : Swift.Hashable {}
extension FuturaeKit.PCBC.Error : Swift.Equatable {}
extension FuturaeKit.PCBC.Error : Swift.Hashable {}
extension FuturaeKit.JWSHeader : FuturaeKit.DataConvertible {}
extension FuturaeKit.CBC.Error : Swift.Equatable {}
extension FuturaeKit.CBC.Error : Swift.Hashable {}
extension FuturaeKit.HMAC.Error : Swift.Equatable {}
extension FuturaeKit.HMAC.Error : Swift.Hashable {}
extension FuturaeKit.RSA.RSAEncryptionVariant : Swift.Equatable {}
extension FuturaeKit.RSA.RSAEncryptionVariant : Swift.Hashable {}
extension FuturaeKit.RSA.RSAEncryptionVariant : Swift.Sendable {}
extension FuturaeKit.OFB.Error : Swift.Equatable {}
extension FuturaeKit.OFB.Error : Swift.Hashable {}
extension FuturaeKit.CipherError : Swift.Equatable {}
extension FuturaeKit.CipherError : Swift.Hashable {}
extension FuturaeKit.RSA.Error : Swift.Equatable {}
extension FuturaeKit.RSA.Error : Swift.Hashable {}
extension FuturaeKit.OCB.Mode : Swift.Equatable {}
extension FuturaeKit.OCB.Mode : Swift.Hashable {}
extension FuturaeKit.OCB.Error : Swift.Equatable {}
extension FuturaeKit.OCB.Error : Swift.Hashable {}
extension FuturaeKit.ECCurveType : Swift.Equatable {}
extension FuturaeKit.ECCurveType : Swift.Hashable {}
extension FuturaeKit.ECCurveType : Swift.RawRepresentable {}
extension FuturaeKit.ECCompression : Swift.Equatable {}
extension FuturaeKit.ECCompression : Swift.Hashable {}
extension FuturaeKit.ECCompression : Swift.RawRepresentable {}
extension FuturaeKit.JWKParameter : Swift.Equatable {}
extension FuturaeKit.JWKParameter : Swift.Hashable {}
extension FuturaeKit.JWKParameter : Swift.RawRepresentable {}
extension FuturaeKit.RSAParameter : Swift.Equatable {}
extension FuturaeKit.RSAParameter : Swift.Hashable {}
extension FuturaeKit.RSAParameter : Swift.RawRepresentable {}
extension FuturaeKit.SymmetricKeyParameter : Swift.Equatable {}
extension FuturaeKit.SymmetricKeyParameter : Swift.Hashable {}
extension FuturaeKit.SymmetricKeyParameter : Swift.RawRepresentable {}
extension FuturaeKit.ECParameter : Swift.Equatable {}
extension FuturaeKit.ECParameter : Swift.Hashable {}
extension FuturaeKit.ECParameter : Swift.RawRepresentable {}
extension FuturaeKit.CFB.Error : Swift.Equatable {}
extension FuturaeKit.CFB.Error : Swift.Hashable {}
extension FuturaeKit.CFB.SegmentSize : Swift.Equatable {}
extension FuturaeKit.CFB.SegmentSize : Swift.Hashable {}
extension FuturaeKit.CFB.SegmentSize : Swift.RawRepresentable {}
extension FuturaeKit.SHA2.Variant : Swift.Equatable {}
extension FuturaeKit.SHA2.Variant : Swift.Hashable {}
extension FuturaeKit.SHA2.Variant : Swift.Sendable {}
extension FuturaeKit.AES.Error : Swift.Equatable {}
extension FuturaeKit.AES.Error : Swift.Hashable {}
extension FuturaeKit.AES.Variant : Swift.Equatable {}
extension FuturaeKit.AES.Variant : Swift.Hashable {}
extension FuturaeKit.AES.Variant : Swift.RawRepresentable {}
extension FuturaeKit.SwKeyStore.SecError : Swift.Equatable {}
extension FuturaeKit.SwKeyStore.SecError : Swift.Hashable {}
extension FuturaeKit.SwKeyStore.SecError : Swift.RawRepresentable {}
extension FuturaeKit.SwKeyConvert.SwError : Swift.Equatable {}
extension FuturaeKit.SwKeyConvert.SwError : Swift.Hashable {}
extension FuturaeKit.PEM.EncryptedPrivateKey.EncMode : Swift.Equatable {}
extension FuturaeKit.PEM.EncryptedPrivateKey.EncMode : Swift.Hashable {}
extension FuturaeKit.CC.CCError : Swift.Equatable {}
extension FuturaeKit.CC.CCError : Swift.Hashable {}
extension FuturaeKit.CC.CCError : Swift.RawRepresentable {}
extension FuturaeKit.CC.DigestAlgorithm : Swift.Equatable {}
extension FuturaeKit.CC.DigestAlgorithm : Swift.Hashable {}
extension FuturaeKit.CC.DigestAlgorithm : Swift.RawRepresentable {}
extension FuturaeKit.CC.HMACAlg : Swift.Equatable {}
extension FuturaeKit.CC.HMACAlg : Swift.Hashable {}
extension FuturaeKit.CC.HMACAlg : Swift.RawRepresentable {}
extension FuturaeKit.CC.OpMode : Swift.Equatable {}
extension FuturaeKit.CC.OpMode : Swift.Hashable {}
extension FuturaeKit.CC.OpMode : Swift.RawRepresentable {}
extension FuturaeKit.CC.BlockMode : Swift.Equatable {}
extension FuturaeKit.CC.BlockMode : Swift.Hashable {}
extension FuturaeKit.CC.BlockMode : Swift.RawRepresentable {}
extension FuturaeKit.CC.AuthBlockMode : Swift.Equatable {}
extension FuturaeKit.CC.AuthBlockMode : Swift.Hashable {}
extension FuturaeKit.CC.AuthBlockMode : Swift.RawRepresentable {}
extension FuturaeKit.CC.Algorithm : Swift.Equatable {}
extension FuturaeKit.CC.Algorithm : Swift.Hashable {}
extension FuturaeKit.CC.Algorithm : Swift.RawRepresentable {}
extension FuturaeKit.CC.Padding : Swift.Equatable {}
extension FuturaeKit.CC.Padding : Swift.Hashable {}
extension FuturaeKit.CC.Padding : Swift.RawRepresentable {}
extension FuturaeKit.CC.RSA.AsymmetricPadding : Swift.Equatable {}
extension FuturaeKit.CC.RSA.AsymmetricPadding : Swift.Hashable {}
extension FuturaeKit.CC.RSA.AsymmetricPadding : Swift.RawRepresentable {}
extension FuturaeKit.CC.RSA.AsymmetricSAPadding : Swift.Equatable {}
extension FuturaeKit.CC.RSA.AsymmetricSAPadding : Swift.Hashable {}
extension FuturaeKit.CC.RSA.AsymmetricSAPadding : Swift.RawRepresentable {}
extension FuturaeKit.CC.DH.DHParam : Swift.Equatable {}
extension FuturaeKit.CC.DH.DHParam : Swift.Hashable {}
extension FuturaeKit.CC.CRC.Mode : Swift.Equatable {}
extension FuturaeKit.CC.CRC.Mode : Swift.Hashable {}
extension FuturaeKit.CC.CRC.Mode : Swift.RawRepresentable {}
extension FuturaeKit.CC.KeyDerivation.PRFAlg : Swift.Equatable {}
extension FuturaeKit.CC.KeyDerivation.PRFAlg : Swift.Hashable {}
extension FuturaeKit.CC.KeyDerivation.PRFAlg : Swift.RawRepresentable {}
extension FuturaeKit.JWEHeader : FuturaeKit.DataConvertible {}
extension FuturaeKit.Padding : Swift.Equatable {}
extension FuturaeKit.Padding : Swift.Hashable {}
extension FuturaeKit.CMAC.Error : Swift.Equatable {}
extension FuturaeKit.CMAC.Error : Swift.Hashable {}
extension FuturaeKit.SignatureError : Swift.Equatable {}
extension FuturaeKit.SignatureError : Swift.Hashable {}
